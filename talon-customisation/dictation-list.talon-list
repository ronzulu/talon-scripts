list: user.dictionary
-
dos a colon: "a:"
dos back acts: "\\acts"
dos back acts back: "\\acts\\"
dos back gfc four hundred: "\\gfc400\\"
dos back maint: "\\maint"
dos back ronny: "\\ronny"
dos back util: "\\util\\"
dos c colon: "c:"
dos dir wide: "dir /W "
dos dir: "dir "
dos dot bmp: ".bmp"
dos dot dot back: "..\\"
dos dot idx: ".idx"
dos dot mak: ".mak"
dos dot qsf: ".qsf"
dos dot rc: ".rc"
dos dot sbr: ".sbr"
dos e colon: "e:"
dos e colon acts: "e:\\ronny\\acts\\"
dos help author: "helpauth"
dos log file: "c:\\acts\\acts.log"
dos lpt3: "LPT3:"
dos print: "print /D:LPT3 "
dos temp one: "c:\\dos\\temp1.tmp "
dos type: "type "
zero zero colon: "00:"
zero zero: "00"
zero one: "01"
zero ten alpha: "010A"
zero two: "02"
zero three: "03"
zero four  alpha: "04A"
zero four charlie: "04C"
zero four: "04"
zero five: "05"
zero six: "06"
zero seven alpha: "07A"
zero seven bravo: "07B"
zero seven: "07"
zero eight slash twenty twenty three: "08/2023"
zero eight: "08"
zero nine: "09"
zero colon: "0:"
zero point two five: "0.25"
zero point five: "0.5"
zero point seven five: "0.75"
zero point: "0."
zero semi new: user.rz_insert_key_sequence("0;{{enter}}")
zero semi: "0;"
zero tab twenty five: user.rz_insert_key_sequence("0{{tab}}25{{tab}}")
zero tab fifty: user.rz_insert_key_sequence("0{{tab}}50{{tab}}")
one zero one collins: "101 Collins Street  Melbourne"
one three cabs: "13cabs"
one nine two dot one six eight: "192.168"
one c: "1C"
one comma: "1,"
one m b : "1MB"
one p quote: "1(""
one point one: "1.1"
one point ten: "1.10"
one point eleven: "1.11"
one point twelve: "1.12"
one point two hotel: "1.2h"
one point five: "1.5"
one point x: "1.x"
one sat: "1SAT"
one tab ten: user.rz_insert_key_sequence("1{{tab}}10000")
one under: "1_"
one x: "1X"
ten seventy one b: "1071B"
ten charlie: "10C"
ten colon: "10:"
eleven seventy four zero five six one: "11740561"
eleven colon: "11:"
twelve colon: "12:"
thirteen colon: "13:"
fourteen thirty eight forty one thirty eight: "14384138"
fourteen belgium: "14Belgium"
fourteen charlie: "14C"
fourteen colon: "14:"
sixteen colon: "16:"
eighteen colon: "18:"
nineteen sixty six: "1966"
nineteen colon: "19:"
two ten: "210"
two nine seven edgecliff: "297 Edgecliff"
two colon: "2:"
two comma: "2,"
two f a s : "2FAS"
two f a: "2FA"
two g five: "2g"
two g: "2G"
two gigabytes: "2GB"
two harbour: "2Harb"
two mort street: "2 Mort Street"
two point zero: "2.0"
two s v : "2SV"
two under: "2_"
twenty ten: "2010"
twenty eleven: "2011"
twenty twelve: "2012"
twenty thirteen: "2013"
twenty fourteen: "2014"
twenty fifteen under zero four: "2015_04"
twenty fifteen under zero six: "2015_06"
twenty fifteen: "2015"
twenty sixteen under zero three: "2016_03"
twenty sixteen under zero five: "2016_05"
twenty sixteen under twelve: "2016_12"
twenty sixteen: "2016"
twenty seventeen dash: "2017-"
twenty seventeen under zero eight: "2017_08"
twenty seventeen: "2017"
twenty eighteen under zero two: "2018_02"
twenty eighteen under zero four: "2018_04"
twenty eighteen under ten: "2018_10"
twenty eighteen: "2018"
twenty nineteen under zero eight: "2019_08"
twenty nineteen under eleven: "2019_11"
twenty nineteen: "2019"
twenty twenty under zero four: "2020_04"
twenty twenty under eleven s: "2020_11 "
twenty twenty: "2020"
twenty twenty one dash: "2021-"
twenty twenty one: "2021"
twenty twenty two dash: "2022-"
twenty twenty two under zero seven: "2022_07"
twenty twenty two under ten: "2022_10"
twenty twenty two: "2022"
twenty twenty three dash twelve: "2023-12"
twenty twenty three dash: "2023-"
twenty twenty three under zero one: "2023_01"
twenty twenty three under zero two: "2023_02"
twenty twenty three under zero three: "2023_03"
twenty twenty three under zero eight: "2023_08"
twenty twenty three under zero nine: "2023_09"
twenty twenty three under eleven: "2023_11"
twenty twenty three: "2023"
twenty twenty four dash zero one: "2024-01"
twenty twenty four dash zero two: "2024-02"
twenty twenty four dash zero three: "2024-03"
twenty twenty four dash zero four: "2024-04"
twenty twenty four dash zero five: "2024-05"
twenty twenty four dash zero six: "2024-06"
twenty twenty four dash zero seven: "2024-07"
twenty twenty four dash zero eight: "2024-08"
twenty twenty four dash zero nine: "2024-09"
twenty twenty four dash ten: "2024-10"
twenty twenty four dash: "2024-"
twenty twenty four: "2024"
twenty twenty five: "2025"
twenty twenty seven: "2027"
twenty [hundred] [zero] eight r two: "2008R2"
twenty [hundred] seventeen under zero five: "2017_05"
twenty one colon: "21:"
twenty two colon: "22:"
twenty three colon: "23:"
twenty four colon: "24:"
twenty four slash seven: "24/7"
twenty five meter: "25m"
three seventeen edward street: "317 Edward Street Brisbane"
three six five: "365"
three ninety a two: "390A2"
three ninety alpha: "390A"
three ninety delta: "390D"
three a: "3a"
three alpha: "3A"
three back quotes enter: user.rz_insert_key_sequence("```{{enter}}")
three back quotes j s: user.rz_insert_key_sequence("```js{{end}}{{enter}}{{up}}{{backspace}}{{down}}")
three back quotes python: "``` python"
three back ticks: "```"
three bravo: "3B"
three colon: "3:"
three comma: "3,"
three d buildings: "3D Buildings"
three equals enter: user.rz_insert_key_sequence("==={{enter}}")
three g five: "3g"
three hashes space: user.rz_insert_key_sequence("###{{space}}")
three marks s: user.rz_insert_key_sequence("!!!{{space}}")
three minus enter: user.rz_insert_key_sequence("---{{enter}}{{enter}}")
three minus signs: "---"
three slash three: "3/3"
three under: "3_"
thirty iraq: "30Iraq"
thirty two bit: "32-bit"
thirty two x thirty two: "32x32"
thirty six ten: "3610"
thirty six twenty: "3620"
thirty six thirty: "3630"
thirty six compass drive: "36 Compass Drive"
thirty six hundred b e: "3600BE"
thirty six hundred c e: "3600CE"
thirty six hundred: "3600"
thirty seven mayne: "37Mayne"
thirty eight forty one: "3841"
four ain tree: "4 AINTREE STREET BRUNSWICK EAST"
four alpha: "4A"
four bravo: "4B"
four charlie: "4C"
four colon: "4:"
four comma: "4,"
four hashes space: user.rz_insert_key_sequence("####{{space}}")
four minus enter: user.rz_insert_key_sequence("----{{enter}}")
four point eight: "4.8"
four wise six: "YYYY"
four x six s: user.rz_insert_key_sequence("XXXX{{space}}")
four x dash: "XXXX-"
four y under two m: "YYYY_MM"
forty one thirty eight: "4138"
forty four thirty three: "4433"
forty four sixty four seventy five seventy five: "44647575"
five bravo: "5B"
five colon: "5:"
five j seven c u d: "5J7CUD"
five point six: "5.6"
five point seven: "5.7"
five under: "5_"
fifty percent: "50%"
six under: "6_"
sixty one foxtrot: "61F"
sixty four bit: "64-bit"
seven colon: "7:"
seven point five: "7.5"
seven under: "7_"
seven zip: "7Zip"
seventy eight sixteen: "7816"
eight colon: "8:"
eight point four: "8.4"
eight point five: "8.5"
eight under: "8_"
nine colon: "9:"
nine under: "9_"
ninety nine carrots: "^99"
a two: "A2"
a six three six: "A636"
a a b k: "bk"
a a p t: "aapt"
a a r x: "rx"
a b a c : "ABAC"
a b d six: "ABD"
a b d: "abd"
a b l six: "ABL"
a b l: "abl"
a b n : "ABN"
a b n five: "abn"
a b n six: "ABN"
a b r v: "abrv"
a b s six: "ABS"
a b s: "abs"
a c c o r: "Accor"
a c c: "acc"
a c d c: "acdsee"
a c d see: "ACDSee"
a c els: "ACLs"
a c g : "ACG"
a c g five: "acg"
a c k: "Ack"
a c l six: "ACL"
a c m six: "ACM"
a c n : "ACN"
a c n six: "ACN"
a c n t: "acnt"
a c p i: "ACPI"
a c r six: "ACR"
a c t six: "ACT"
a c t s: "ACTS"
a c t under: "ACT_"
a c t: "act"
a d d six: "ADD"
a d d r: "addr"
a d d: "add"
a d f six: "ADF"
a d f: "adf"
a d j six: "ADJ"
a d m five: "adm"
a d m six: "ADM"
a d m: "adm"
a d n six: "ADN"
a d o six: "ADO"
a d o d b : "ADODB"
a d r s: "adrs"
a d s l six: "ADSL"
a d s l: "adsl"
a dash b: "a-b"
a deer: "Adir"
a e six: "AE"
a e under six: "AE_"
a f a i k : "AFAIK"
a f o m: "afom"
a f x m s g: "afx_msg "
a f x message box: "AfxMessageBox("
a f x message: "AfxMessageBox("
a f x: "afx"
a g g r under: "AGGR_"
a g l six: "AGL"
a g m six: "AGM"
a g r six: "AGR"
a h six: "AH"
a h p r a: "ahpra"
a i six: "AI"
a i d six: "AID"
a i d: "aid"
a k a: "aka"
a l b six: "ALB"
a l g six: "ALG"
a l l o c: "alloc"
a l s six: "ALS"
a l t: "alt"
a m six: "AM"
a m a s six: "AMAS"
a m eyes: "AMIs"
a m i six: "AMI"
a m l six: "AML"
a m n g six: "AMNG"
a m s six: "AMS"
a m s l six: "AMSL"
a m s l: "amsl"
a n a t: "anat"
a n k i: "Anki"
a n u six: "ANU"
a n u: "Anu"
a n z six: "ANZ"
a o eyes: "AOIs"
a o i six: "AOI"
a p six: "AP"
a p a six: "APA"
a p a m d u : "APA MDU"
a p a m d u one: "ApaMdu"
a p a networks: "APA Networks"
a p a transmission: "APA Transmission"
a p a: "apa"
a p d u six: "APDU"
a p d u under five: "apdu_"
a p dash south east: "ap-southeast"
a p i six: "API"
a p i gateway: "API Gateway"
a p i: "api"
a p p bar one: "AppBar"
a p p dash: "app-"
a p p l: "appl"
a p p s: "apps"
a p p: "app"
a p south east two: "ap-southeast-2"
a p t: "apt"
a p tdash: "apt-"
a p under: "AP_"
a q five: "aq"
a q bulk: "AqBulk"
a q m s six: "AQMS"
a q m s: "aqms"
a q p six: "AQP"
a q p under: "AQP_"
a q p: "aqp"
a q pro one: "AQPro"
a q pro five: "aqpro"
a q pro a p i: "AQ Pro API"
a q pro batch files: "D:\\sw\\Callpoint\\AQ Pro\\trunk\\WebAQPro2\\TestData\\BatchFiles"
a q pro cust: "AQProCust"
a q pro dash: "aqpro-"
a q pro global: "AQProGlobal"
a q pro under: "aqpro_"
a q pro: "AQ Pro"
a r c: "arc"
a r g s: "Args"
a r g v: "argv"
a r g: "arg"
a r i six: "ARI"
a r n six: "ARN"
a r n: "arn"
a s a p : "ASAP"
a s c: "asc"
a s g six: "ASG"
a s m: "asm"
a s p  dot net core: "ASP.NET Core"
a s p dot net: "ASP.NET"
a s p: "asp"
a s s o c: "assoc"
a s t six: "AST"
a s t: "ast"
a s x : "ASX"
a s x two hundred: "ASX 200"
a s y n c: "async"
a t ninety s: "at90s"
a t l five: "atl"
a t l: "ATL"
a t mega: "atmega"
a t n: "atn"
a t o five: "ato"
a t o six: "ATO"
a t r six: "ATR"
a t r: "atr"
a t s i c six: "ATSIC"
a t t r: "attr"
a t t: "att"
a u d: "aud"
a u g twenty: "AUG20"
a u g twenty two under: "AUG22_"
a u g twenty two: "AUG22"
a u g twenty three under: "AUG23_"
a u g twenty three: "AUG23"
a u g: "aug"
a u s six: "AUS"
a u s post: "AusPost"
a u s t: "aust"
a u s: "aus"
a u t h: "auth"
a u t: "aut"
a v six: "AV"
a v g: "avg"
a v i one: "Avi"
a v i v i: "Avivi"
a w k: "awk"
a w s five: "aws"
a w s six: "AWS"
a w s amplify: "AWS Amplify"
a w s batch: "AWS Batch"
a w s config: "AWS Config"
a w s credentials: "AWSCredentials"
a w s e b s : "AWS EBS"
a w s e c two: "AWS EC2"
a w s e c s : "AWS ECS"
a w s e k s: "AWS EKS"
a w s edge: "AWS Edge"
a w s far gate: "AWS Fargate"
a w s fargate: "AWS Fargate"
a w s glue: "AWS Glue"
a w s i o t : "AWS IoT"
a w s i q : "AWS IQ"
a w s identity centre: "AWS Identity Centre"
a w s lambda: "AWS Lambda"
a w s local zones: "AWS Local Zones"
a w s macie: "AWS Macie"
a w s outposts: "AWS Outposts"
a w s s three: "AWS S3"
a w s shield: "AWS Shield"
a w s v p c : "AWS VPC"
a w s wavelength: "AWS Wavelength"
a w s x-ray: "AWS X-Ray"
a w s: "AWS"
a x five: "ax"
a z six: "AZ"
a z o p t: "Azopt"
a z plural: "AZs"
a zeds: "AZs"
a zees : "AZs"
access three: "Access"
acid six: "ACID"
action tech: "ActionTech"
active directory: "Active Directory"
ad hoc one: "AdHoc"
add dash: "Add-"
add in: "add-in"
address detail pid six: "ADDRESS_DETAIL_PID"
address under default geocode: "ADDRESS_DEFAULT_GEOCODE"
address under detail six: "ADDRESS_DETAIL"
address under detail pid six: "ADDRESS_DETAIL_PID"
address under feature six: "ADDRESS_FEATURE"
address under line one six: "ADDRESS_LINE1"
address under site geocode: "ADDRESS_SITE_GEOCODE"
address under site pid six: "ADDRESS_SITE_PID"
admin boundaries: "Admin Boundaries"
agent dash: "agent-"
air b n b: "airbnb"
air rights: "Air Rights"
air tasker: "Airtasker"
alberti forty two: "alberti42"
alex slash r z : "Alex/RZ"
alias under principal six: "ALIAS_PRINCIPAL"
all states six: "ALLSTATES"
alpha one: "A1"
alpha two six: "A2"
alpha two: "A2"
alpha four: "A4"
alpha under: "A_"
amazon r d s : "Amazon RDS"
ampersand p under: "& p_"
ampersand p: "&p"
ampersand papa: "&p"
ampersand s: "& "
anaconda three: "Anaconda"
and slash or: "and/or"
andrew n g: "Andrew Ng"
angle brackets left: user.rz_insert_key_sequence("<>{{left}}")
angle sharp: "AngleSharp"
annex alpha: "Annex A"
annexure alpha: "Annexure A"
ant sick: "ANZSIC"
anti dash: "anti-"
app c m d: "appcmd "
app config: "AppConfig"
app do dash one: "APDU-1"
app do dash two: "APDU-2"
app do dash three: "APDU-3"
app do dash: "APDU-"
app stream two point zero: "AppStream 2.0"
app sync: "AppSync"
application slash jason: "application/json"
apply suggestion: user.rz_insert_key_sequence("{{ctrl-alt-.}}")
april twenty twenty four: "April 2024"
arc g i s : "ArcGIS"
arch e star: "Archistar"
are equal: "AreEqual"
as a service: "as a Service"
as boolean: " As Boolean"
as code: "as Code"
as collection: " AS Collection"
as double: " As Double"
as integer: " As Integer"
as long: " As Long"
as object: " As Object"
as p e r: "as per"
as string quote quote: " As String = """
as string: " As String"
as variant: " As Variant"
ass sure a d : "Azure AD"
ass sure: "Azure"
assert dot that: "Assert.That("
assert dot throws: "Assert.Throws<>(() => "
assert dot: "Assert."
assert x dot: "AssertX."
assert x: "AssertX"
asterisk five: "***** "
at four: "@4"
at brian: "@Brian"
at callpoint spatial: "@callpointspatial.com.au"
at card access: "@cardaccess.com.au"
at edge: "@Edge"
at g mail: "@gmail.com"
at giga: "@giga.net.au"
at hear here gps: "@hearheregps"
at heartbeat: "@heartbeat.com.au"
at if l: user.rz_insert_key_sequence("@if ({{Z1L}}")
at isaac: "@Isaac"
at left brace: "@{"
at left right left: user.rz_insert_key_sequence("@(){{left}}")
at odhette: "@Odhette"
at papa: "@p"
at quote: "@""
at r e f equals: user.rz_insert_key_sequence("@ref=""{{left}}")
at ronen: "@Ronen"
at sign l: user.rz_insert_key_sequence("@{{Z1L}}")
at sign left brace: "@{"
at sign left p: "@("
at sign paste: user.rz_insert_key_sequence("@{{ctrl-v}}")
at smart silicon: "@smartsilicon.com.au"
at star: "@*"
at zulaikha: "@zulaikha"
aug nineteen: "AUG19"
aug twenty: "AUG20"
augmented cadlite one: "AugmentedCadLite"
augmented cadlite: "Augmented CadLite"
aus harvest: "OzHarvest"
aus post under: "auspost_"
aus post: "AusPost"
aus trace under: "AUSTRACE_"
aussie center: "centre"
auth e: "Authy"
auth n z: "AuthNZ"
auth n: "AuthN"
auth z: "AuthZ"
auto complete: "autocomplete"
auto hot key: "AutoHotKey"
auto scaling: "Auto Scaling"
availability zone: "Availability Zone"
await client: "[Await Client]"
await discussion: "[Await Discussion] "
await ronny: "[Await Ronny]"
await supplier: "[Await Supplier]"
awaiting margaret: "[Awaiting Margaret]"
b two b : "B2B"
b a six: "BA"
b a l: "bal"
b a r e l: "Barel"
b a s : "BAS"
b a u d: "baud"
b address of: "AddressOf "
b ampersand: " & "
b and: " AND "
b as: " AS "
b b six: "BB"
b b c : "BBC"
b b colon s: "BB: "
b b discussions: "BB disc"
b bar bar l: user.rz_insert_key_sequence(" || {{Z1L}}")
b bar bar: " || "
b bar clip: " | clip"
b bar equals: " |= "
b bar: " | "
b bravo: "b"
b break: "Break"
b c e : "BCE"
b call: "Call "
b cancel: "cancel"
b case: "Case "
b colon l: user.rz_insert_key_sequence(" : {{Z1L}}")
b colon: " : "
b comma six: user.rz_insert_key_sequence(", {{Z6}}")
b comma dollar: ", $"
b comma equals to paste: user.rz_insert_key_sequence(", Is.EqualTo({{wait:200}}{{Ctrl+v}}{{wait:200}})")
b comma l: user.rz_insert_key_sequence(", {{Z1L}}")
b comma: user.rz_insert_key_sequence(", {{Z1}}")
b dim l: user.rz_insert_key_sequence("Dim {{Z1L}}")
b dim: "Dim "
b e l e l cap i: "belelI"
b e l e l i: "beleli"
b e r t : "BERT"
b e r: "ber"
b echo: "e"
b else if: "Else If "
b equals l: user.rz_insert_key_sequence(" = {{Z1L}}")
b equals p: " = p"
b equals: " = "
b f six: "BF"
b false: "FALSE"
b foxtrot: "f"
b from: " FROM "
b g enter: user.rz_insert_key_sequence("{{enter}}{{Z2}}")
b g g g: user.rz_insert_key_sequence("gg{{enter}}")
b g g l: user.rz_insert_key_sequence("gl{{enter}}")
b g n r: user.rz_insert_key_sequence("nr{{enter}}")
b g name: "mahboos"
b g smile: ":-)"
b golf: "g"
b goto: "Goto "
b greater than equal: " >= "
b greater than l: user.rz_insert_key_sequence(" > {{Z1L}}")
b greater than: " > "
b h p  coal: "BHP Coal"
b h p : "BHP"
b hat: " ^ "
b i five: "bi"
b i six: "BI"
b i d a l: "BiDal"
b i n: "bin"
b i t: "bit"
b if l: user.rz_insert_key_sequence("If ({{Z1L}}")
b if not: "If (Not "
b if: "If ("
b imports: "Imports "
b in: " In "
b india: "i"
b j six: "BJ"
b l a h: "blah"
b l d g: "bldg"
b l d: "bld"
b l l six: "BLL"
b l l: "bll"
b l u m: "Blum"
b left shift: " << "
b less than equal: " <= "
b less than equals: user.rz_insert_key_sequence("{{space}}<={{space}}")
b less than l: user.rz_insert_key_sequence(" < {{Z1L}}")
b less than: " < "
b loop: "Loop "
b minus l: user.rz_insert_key_sequence(" - {{Z1L}}")
b minus: " - "
b n: "n"
b name space: "Namespace "
b new: "New "
b next: "Next"
b not equal: " <> "
b not equals l: user.rz_insert_key_sequence(" <> {{Z1L}}")
b not equals: " <> "
b not l: user.rz_insert_key_sequence("Not {{Z1L}}")
b not: "Not "
b o m: "bom"
b o t o three: "boto3"
b o x: "box"
b or: " OR "
b papa: "p"
b percent: " % "
b plus l: user.rz_insert_key_sequence(" + {{Z1L}}")
b plus: " + "
b property: "Property "
b quote: " ""
b r i t: "brit"
b r paren: " )"
b return l: user.rz_insert_key_sequence("Return {{Z1L}}")
b return s: "Return "
b right shift: " >> "
b s b : "BSB"
b s p six: "BSP"
b s p: "bsp"
b s s: "bss"
b semi: "; "
b set: "Set "
b shared: "Shared "
b slash l: user.rz_insert_key_sequence(" / {{Z1L}}")
b slash: " / "
b star l: user.rz_insert_key_sequence(" * {{Z1L}}")
b star: " * "
b sub: "Sub "
b t dash: "BT-"
b t n dash: "btn-"
b t n: "btn"
b t w six: "BTW"
b then: ") Then"
b to: " To "
b true: "TRUE"
b u d i: "Budi"
b u f: "buf"
b u p a: "Bupa"
b u s: "bus"
b union: " UNION "
b where: " WHERE "
b whiskey: "w"
b y o l : "BYOL"
back twenty twenty four enter: user.rz_insert_key_sequence("\\2024{{enter}}")
back alpha: "\\alpha"
back approximate: "\\approx"
back back v m ware host: "\\\\vmware-host"
back c dot: "\\cdot"
back comma: "\\,"
back delta three: "\\Delta"
back epsilon: "\\epsilon"
back f r a c: "\\frac"
back gamma: "\\gamma"
back huge: "\\huge"
back l t: "\\lt"
back lambda: "\\lambda"
back large: "\\large"
back link: "backlink"
back links: "backlinks"
back not equals: "\\neq"
back november: "\\\\n"
back o s r enter: user.rz_insert_key_sequence("\\osr{{enter}}{{enter}}")
back o s r: "\\osr"
back omega: "\\omega"
back p h i: "\\phi"
back pi: "\\pi"
back prop to: "\\propto"
back propagation: "backpropagation"
back quote enter: user.rz_insert_key_sequence("`{{enter}}")
back quote november: "`n"
back quote quote: "`""
back quote romeo: "`r"
back quote tango: "`t"
back r h o: "\\rho"
back romeo november two: "\\r\\n\\r\\n"
back romeo november: "\\r\\n"
back romeo: "\\r"
back s u m: "\\sum"
back shared folders: "\\Shared Folders"
back t a u: "\\tau"
back tango: "\\t"
back therefore: "\\therefore"
back theta one: "\\theta_1"
back tick paste tick: user.rz_insert_key_sequence("`{{wait:200}}{{Ctrl+v}}{{wait:200}}`")
back tick: "`"
back times: "\\times"
back v e c: "\\vec "
backslash delta: "\\d"
backslash dot: "\\."
backslash n: "\\n"
backslash trunk: "\\trunk"
backup service: "Backup Service"
bam back: "Bamback"
band id: "BandId"
bank oz: "BankAus"
bar five hundred: "|500"
bar bar task: "||Task"
base camp: "Basecamp"
base dot: "base."
base under parcel six: "BASE_PARCEL"
bash he: "Bashi"
bash space: "bash "
beagle bone: "BeagleBone"
begin capitalize: user.rz_insert_key_sequence("")
begin document: user.rz_insert_key_sequence("{{Z1}}")
begin lowercase: user.rz_insert_key_sequence("")
begin no space: user.rz_insert_key_sequence("")
begin title: user.rz_insert_key_sequence("{{Z1}}")
begin uppercase: user.rz_insert_key_sequence("")
belly b dollar forty five: "bellyB$45"
belly b forty four: "bellyb44"
belly b: "bellyb"
belly bat forty four: "bellyB@44"
big era waters: "Biggera Waters"
bin back debug enter: user.rz_insert_key_sequence("bin\\debug{{enter}}")
bin debug net eight windows: "bin\\debug\\net8.0-windows"
bin pack: "binpack"
bin yan conjugation: "BinyanConjugation"
bin yan: "binyan"
binyan dash: "binyan-"
black list: "blacklist"
blacks land: "Blaxland"
blazer o: "Blazor"
bless you: user.rz_insert_key_sequence("")
block h: "Bloch"
block under street address six: "BLOCK_STREET_ADDRESS"
blu-ray five: "bluray"
blue tack: "Blu-Tack"
blue tools: "BlueTools"
blue tooth: "Bluetooth"
boil five less: user.rz_insert_key_sequence("bool {{Z1L}}")
boil five s: "bool "
boil five t: user.rz_insert_key_sequence("bool{{tab}}")
boil five: "bool"
book plural: "books"
boot strap: "bootstrap"
box one: "Box"
braces zero: user.rz_insert_key_sequence("{{l-brace}}{{}}0{{r-brace}}")
braces one: user.rz_insert_key_sequence("{{l-brace}}{{}}1{{r-brace}}")
braces three: user.rz_insert_key_sequence("{{l-brace}}{{}}3{{r-brace}}")
braces five: user.rz_insert_key_sequence("{{l-brace}}{{}}5{{r-brace}}")
braces six: user.rz_insert_key_sequence("{{l-brace}}{{}}6{{r-brace}}")
braces archive: user.rz_insert_key_sequence("{{l-brace}}{{}}archive{{r-brace}}")
braces get set: user.rz_insert_key_sequence("{{l-brace}}{{}}{{space}}get;{{space}}set;{{space}}{{r-brace}}")
braces n: user.rz_insert_key_sequence("{{l-brace}}{{}}{{r-brace}}{{left}}")
braces quote: user.rz_insert_key_sequence("{{l-brace}}{{}}quote{{r-brace}}")
bracket paste bracket: user.rz_insert_key_sequence("[{{ctrl-v}}]")
brat six: "BRAT"
bravo one: "B1"
bravo two: "B2"
bravo three: "B3"
bravo five: "B5"
bravo under: "B_"
brian at callpoint: "brianb@callpointspatial.com.au"
brian b at callpoint: "brianb@callpointspatial.com.au"
brian b: "brianb"
brian comma ronny: "Brian, Ronny"
brian's email callpoint: "brianb@callpointspatial.com.au"
brown fields: "brownfields"
buf left: "Buf["
builder i d : "Builder ID"
building under address: "BUILDING_ADDRESS"
building under pid six: "BUILDING_PID"
building under: "building_"
buildings two point zero: "Buildings 2.0"
built in: "built-in"
bulk r b s : "Bulk RBS"
button seven: "button"
by val l: user.rz_insert_key_sequence("ByVal {{Z1L}}")
by value l: user.rz_insert_key_sequence("ByVal {{Z1L}}")
by value: "ByVal "
byte five less: user.rz_insert_key_sequence("byte {{Z1L}}")
byte five: "byte"
byte by byte: "byte-by-byte"
byte s: "BYTE "
byte t: user.rz_insert_key_sequence("BYTE{{tab}}")
c  handle: "HANDLE"
c  is: " is "
c two dot: "c2."
c three s: "CCcs"
c a b s: "CAbs"
c a d six: "CAD"
c a d under: "CAD_"
c a d: "cad"
c a f six: "CAF"
c a g r : "CAGR"
c a l c: "calc"
c a n n: "Cann"
c a n v a: "canva"
c a r t o: "carto"
c a s five: "cas"
c a t e g: "categ"
c a v v six: "CAVV"
c a z: "caz"
c abstract s: "abstract "
c abstract: "abstract"
c and: " && "
c arrow: "->"
c as: " as "
c assert: "ASSERT("
c async: "async "
c await: "await "
c b five: "cb"
c b a six: "CBA"
c b c t : "CBCT"
c b d six: "CBD"
c b d: "cbd"
c b f six: "CBF"
c b t: "cbt"
c bar equals: " |= "
c base dot: "base."
c base left: "base("
c boil question: "bool?"
c boil s: "BOOL "
c boil t: user.rz_insert_key_sequence("BOOL{{tab}}")
c boolean: "BOOLEAN"
c break semi: "break;"
c break: "break"
c by less: user.rz_insert_key_sequence(" by {{Z1L}}")
c by: " by "
c byte array: "byte[]"
c byte s: "BYTE "
c byte: "BYTE"
c c a : "CCA"
c c c s: "CCcs"
c c colon: "CC:"
c c dc: "CDC"
c c dump: "CDump"
c c edit: "CEdit"
c c grid one: "CGrid1"
c c o b array: "CObArray"
c c p: "CCp"
c c pen: "CPen"
c c point: "CPoint"
c c rect: "CRect"
c c string: "CString"
c case: "case "
c cast control: "(Control)"
c cast decimal: "(decimal)"
c cast double: "(double)"
c cast int: "(int)"
c cast short: "(short)"
c cast string: "(string)"
c catch: "catch ("
c caz: "CCas"
c char less: user.rz_insert_key_sequence("char {{Z1L}}")
c char s: "char "
c charlie: "c"
c class s: "class "
c class: "class"
c colon back: "c:\\"
c colon base: " : base("
c colon less: user.rz_insert_key_sequence(": {{Z1L}}")
c colon software: "c:\\sw\\"
c colon: " : "
c combo: "combo"
c comment line: user.rz_insert_key_sequence("//////////////////////////////////////////////////////////////////////{{enter}}")
c con less: user.rz_insert_key_sequence("const {{Z1L}}")
c con s: "const "
c config: "CConfig"
c const s: "const "
c continue: "continue"
c cos etsi: "CCosEtsi"
c cos: "CCos"
c d dot dot back: "cd ..\\"
c d k six: "CDK"
c d l g: "dlg"
c d space: "cd "
c debug: "CDebug"
c decimal less: user.rz_insert_key_sequence("decimal {{Z1L}}")
c default: "default:"
c delegate s: "delegate "
c delete p: "delete p"
c delete: "delete "
c do: "do"
c dot l: user.rz_insert_key_sequence("c.{{Z1L}}")
c double less: user.rz_insert_key_sequence("double {{Z1L}}")
c double: "double"
c e numb s: "enum "
c e numb: "enum"
c e r t: "cert"
c else if: "else if ("
c else: "else"
c end if: user.rz_insert_key_sequence("#endif{{enter}}")
c equals l: user.rz_insert_key_sequence(" == {{Z1L}}")
c equals: " == "
c event s: "event "
c explicit: "explicit "
c external: "extern "
c f five: "cf"
c f six: "CF"
c f d six: "CFD"
c f i s : "CFIS"
c f i: "cfi"
c f s six: "CFS"
c false: "FALSE"
c file time: "FILETIME"
c finally: "finally"
c for each: "foreach ("
c for i loop: "for (int i = 0; i < ; i++)"
c for index: "for (Index = 0; Index < ; Index++)"
c for j loop: "for (int j = 0; j < ; j++)"
c friend: "friend "
c from l: user.rz_insert_key_sequence("from {{Z1L}}")
c from less: user.rz_insert_key_sequence("from {{Z1L}}")
c g j : "CGJ"
c g t six: "CGT"
c get set: user.rz_insert_key_sequence("{{l-brace}}{{}} get; set; {{r-brace}}")
c get: "get"
c group l: user.rz_insert_key_sequence("group {{Z1L}}")
c group less: user.rz_insert_key_sequence("group {{Z1L}}")
c group: "group "
c h a g: "chag"
c h a i: "Chai"
c h a n i: "Chani"
c h a r s: "chars"
c h a r: "char"
c h d c six: "CHDC"
c h q: "chq"
c h r: "chr"
c h v: "chv"
c hat: " ^ "
c hotel: "h"
c i five: "ci"
c i c d : "CI/CD"
c i d r : "CIDR"
c i d: "cid"
c i lambda: "i => "
c i t b : "CITB"
c i t b six: "CITB"
c if l: user.rz_insert_key_sequence("if ({{Z1L}}")
c if not l: user.rz_insert_key_sequence("if (!{{Z1L}}")
c if not: "if (!"
c if: "if ("
c in less: user.rz_insert_key_sequence(" in {{Z1L}}")
c in question: "int?"
c in s: " in "
c in t s: "int "
c in t: user.rz_insert_key_sequence("int{{tab}}")
c in: "int"
c inline: "inline "
c int array: "int[] "
c int less: user.rz_insert_key_sequence("int {{Z1L}}")
c int s: "int "
c interface: "interface"
c internal s: "internal "
c internal: "internal"
c into less: user.rz_insert_key_sequence(" into {{Z1L}}")
c into: " into "
c iso: "CIso"
c l six: "CL"
c l a six: "CLA"
c l a: "cla"
c l b six: "CLB"
c l b: "clb"
c l i six: "CLI"
c l i x m l: "clixml"
c l i: "cli"
c l p: "lp"
c l y m: "Clym"
c lambda: " => "
c left shift: "<<"
c let l: user.rz_insert_key_sequence("let {{Z1L}}")
c let less: user.rz_insert_key_sequence("let {{Z1L}}")
c lock l: user.rz_insert_key_sequence("lock ({{Z1L}}")
c lock: "lock ("
c long less: user.rz_insert_key_sequence("long {{Z1L}}")
c long s: "long "
c long: "long"
c m b under: "cmb_"
c m b: "cmb"
c m d lambda: "(cmd) => "
c m d: "cmd"
c m dash l: user.rz_insert_key_sequence("cm-{{Z1L}}")
c m i six: "CMI"
c m k six: "CMK"
c m p: "cmp"
c mad: "CMad"
c map e: "cMapi"
c map x: "CMapX"
c mark l: user.rz_insert_key_sequence("!{{Z1L}}")
c mark: "!"
c message s: user.rz_insert_key_sequence("message{{space}}")
c minus line: "-----------------------------------------------------------------------------"
c n c six: "CNC"
c n n six: "CNN"
c n t: "cnt"
c name of: "nameof("
c new block: user.rz_insert_key_sequence("{{l-brace}}{{enter}}{{enter}}{{r-brace}}{{up}}{{end}}{{tab}}")
c new: "new "
c not equals l: user.rz_insert_key_sequence(" != {{Z1L}}")
c not equals: " != "
c note: user.rz_insert_key_sequence("NOTE: {{Z2C}}")
c november: "n"
c null: "NULL"
c o two: "CO2"
c o five: "co"
c o a six: "COA"
c o b six: "COB"
c o c h i: "Cochi"
c o d e t: "codet"
c o h s: "COhs"
c o l s: "cols"
c o l: "col"
c o m six: "COM"
c o m b: "comb"
c o m m: "comm"
c o m: "com"
c o n d a: "conda"
c o n j: "conj"
c o n n: "conn"
c o n s: "cons"
c o n t: "cont"
c o n v: "conv"
c o n: "con"
c o o r d: "coord"
c o r p: "corp"
c o r s : "CORS"
c o s: "cos"
c o t s six: "COTS"
c object less: user.rz_insert_key_sequence("object {{Z1L}}")
c object s: "object "
c object: "object"
c open brace: user.rz_insert_key_sequence("{{l-brace}}{{}}{{del}}{{backspace}}")
c operator: "operator"
c order by: "orderby "
c oscar: "o"
c out less: user.rz_insert_key_sequence("out {{Z1L}}")
c out s: "out "
c out: "out"
c override: "override"
c p five: "cp"
c p seven: "cp"
c p c s: "CpCs"
c p column: "CpColumn"
c p container: "CpContainer"
c p cust dash: "cp-cust-"
c p dash aurora: "cp-aurora"
c p dash: "cp-"
c p data: "CpData"
c p dataset repo: "cp-dataset-repo"
c p decimal: "CpDecimal"
c p defeat: "cpDfeit"
c p exception: "CpException"
c p f d r: "CpFdr"
c p i : "CPI"
c p i six: "CPI"
c p info sec: "CP_INFOSEC"
c p line segment: "CpLineSegment"
c p line: "CpLine"
c p logger: "CpLogger"
c p message box: "CpMessageBox"
c p multi polygon: "CpMultipolygon"
c p p t r: "pPtr"
c p point: "CpPoint"
c p polygon: "CpPolygon"
c p qualify: "CpQualify"
c p rectangle: "CpRectangle"
c p ring: "CpRing"
c p rom: "cp_rom"
c p s dash nas: "CPS-NAS"
c p s q l: "CpSql"
c p s v n: "CpSvn"
c p t six: "CPT"
c p t: "cpt"
c p table seven: "cpTable"
c p table type: "CpTableType"
c p table u r l: "CpTableUrl"
c p table: "CpTable"
c p under: "cp_"
c p y: "cpy"
c pack: "pack("
c parameters s: "params "
c percent delta: "%d"
c percent sierra: "%s"
c plus equals l: user.rz_insert_key_sequence(" += {{Z1L}}")
c plus equals: " += "
c point: "CPoint"
c position: "POSITION"
c pragma: "#pragma "
c prams s: "params "
c private colon: user.rz_insert_key_sequence("private:{{enter}}")
c private less: user.rz_insert_key_sequence("private {{Z1L}}")
c private s: "private "
c private static: "private static "
c private string: "private string "
c private: "private"
c protected s: "protected "
c protected: "protected"
c public class: "public class "
c public colon: "public:"
c public const: "public const "
c public in t: "public int "
c public l: user.rz_insert_key_sequence("public {{Z1L}}")
c public override: "public override "
c public pool: "public bool "
c public s: "public "
c public static: "public static "
c public string: "public string "
c public void: "public void "
c public: "public"
c pure virtual: " const = 0"
c question mark: " ? "
c question question: " ?? "
c r three: "Cr"
c r n t: "crnt"
c r o n: "cron"
c r p six: "CRP"
c r s six: "CRS"
c read only s: "readonly "
c read only: "readonly "
c rect: "RECT"
c ref less: user.rz_insert_key_sequence("ref {{Z1L}}")
c ref s: "ref "
c ref: "ref"
c repeated s: user.rz_insert_key_sequence("repeated{{space}}")
c return false: "return false;"
c return less: user.rz_insert_key_sequence("return {{Z1L}}")
c return new: "return new "
c return null: "return null;"
c return result: "return result;"
c return s: "return "
c return semi: "return;"
c return true: "return true;"
c return: "return"
c returns left: "returns ("
c s five: "cs"
c s a: "csa"
c s b six: "CSB"
c s con: " const"
c s g : "CSG"
c s lyn: user.rz_insert_key_sequence(" in {{Z1L}}")
c s p c: "CSpc"
c s p: "csp"
c s r six: "CSR"
c s reference: "ref "
c s s six: "CSS"
c s s: "css"
c s v: "csv"
c s z: "sz"
c scanf: "scanf("
c select s: "select "
c semi l: user.rz_insert_key_sequence(";{{enter}}{{Z1L}}")
c semi left: user.rz_insert_key_sequence(";{{enter}}{{backspace}}")
c semi s: "; "
c semi: user.rz_insert_key_sequence(";{{enter}}")
c set: "set"
c sharp three: "CSharp"
c sharp eight: "C# 8"
c sharp: "C#"
c short s: "short "
c short: "short"
c size of: "sizeof("
c slash c: user.rz_insert_key_sequence("// {{Z2C}}")
c slash input: user.rz_insert_key_sequence("//{{space}}Input:{{enter}}//{{tab}}{{tab}}")
c slash return: "// Return:"
c slash: user.rz_insert_key_sequence("// {{Z2}}")
c sss: "CSSS"
c static s: "static "
c static: "static"
c string one: "CString1"
c string array: "string[]"
c string s: "CString "
c string t: user.rz_insert_key_sequence("CString{{tab}}")
c struct: "struct"
c structure: "struct"
c switch l: user.rz_insert_key_sequence("switch ({{Z1L}}")
c switch: "switch ("
c system time: "SYSTEMTIME"
c t six: "CT"
c t a p six: "CTAP"
c t l v: "CTlv"
c t r l: "ctrl"
c t scan: "CT Scan"
c t x: "ctx"
c template: "template<"
c this: "this"
c throw new: "throw new "
c throw s: "throw "
c throw: "throw"
c time span: "CTimeSpan"
c to do: "// TODO: "
c true: "TRUE"
c try brace: user.rz_insert_key_sequence("try{{enter}}{{l-brace}}{{}}")
c try left: user.rz_insert_key_sequence("try{{enter}}{{")
c type definition: "typedef "
c type name: "typename "
c type of: "typeof("
c typedef: "typedef "
c u f a r: "Cufar"
c u in pointer: "UIntPtr"
c u int: "uint"
c u r l: "curl"
c u s t under: "cust_"
c u s t: "cust"
c u sim: "CUsim"
c uick: "CUicc"
c union: "union "
c using left: "using ("
c using: "using "
c v five: "cv"
c v s e com: "C:\\sw\\cas\\cvsmnt\\ecom\\"
c v v six: "CVV"
c v v: "cvv"
c value: "value"
c var l: user.rz_insert_key_sequence("var {{Z1L}}")
c var less: user.rz_insert_key_sequence("var {{Z1L}}")
c var s: "var "
c variant: "VARIANT"
c void s: "void "
c void t: user.rz_insert_key_sequence("void{{tab}}")
c void: "void"
c volatile: "volatile "
c where less: user.rz_insert_key_sequence("where {{Z1L}}")
c while less: user.rz_insert_key_sequence("while ({{Z1L}}")
c while: "while"
c win thirty two: "WIN32"
c word s: "WORD "
c word: "WORD"
c y b g six: "CYBG"
c yield return: "yield return "
c yield s: "yield "
c yield: "yield"
ccolon colon l: user.rz_insert_key_sequence("::{{Z1L}}")
clpcstr: "LPCSTR"
cad parcel id six: "CAD_PARCEL_ID"
cad states: "CAD States"
cad under six: "CAD_"
cad under pid six: "CAD_PID"
cad under polygon p i d: "CAD_POLYGON_PID"
cadastre under pid six: "CADASTRE_PID"
cadlite extra: "Cadlite Extra"
cal three d: "Cal3D"
call point: "Callpoint"
callpoint s v n: "D:\\sw\\Callpoint\\"
callpoint spatial: "Callpoint Spatial"
can six: "CAN"
cancelled colon s: "Cancelled: "
cap bravo two: "B2"
cap charlie nine: "C9"
cap foxtrot s: user.rz_insert_key_sequence("F{{space}}")
cap hotel four: "H4"
cap i star: "I*"
cap s seven: "S7"
cap sierra two: "S2"
cap sierra three: "S3"
cap sierra four: "S4"
cap sierra seven: "S7"
cap tea: "Capti"
cap x: "CapEx"
capitalize next two: "CapitalizeNext 2"
capitalize next: user.rz_insert_key_sequence("{{Z1}}")
caps r two: "R2"
caps v one v two: "V1 V2"
caps v one: "V1"
capture under date six: "CAPTURE_DATE"
card list type: "CardListType"
card pro: "CardPro"
cas pad six: "CASPAD"
cas pad: "caspad"
case else: "Case Else"
case law: "Caselaw"
cast byte: "(BYTE)"
cast double: "(double)"
cast float: "(float)"
cast l p c t: "(LPCTSTR)"
cast l p c: "(LPCSTR)"
cast long: "(long)"
cast p s custom object: "[pscustomobject]"
cast word: "(WORD)"
caz l i b: "caslib"
center aus: "centre"
center link: "Centrelink"
centroid edition: "Centroid Edition"
change log dot m d: "changelog.md"
change log: "changelog"
char s star l: user.rz_insert_key_sequence("char *{{Z1L}}")
charge back: "chargeback"
charlie three: "C3"
charlie colon back: "c:\\"
chat g p t : "ChatGPT"
check box one: "CheckBox"
check box seven: "checkBox"
cheers ronny: "Cheers"
cheese els: "Cheezels"
cheque q: "cheque"
child item : "ChildItem "
chile olives: "ChilliOlives"
chrome one: "Chrome"
clear and re run: user.rz_insert_key_sequence("clear{{enter}}{{up}}{{up}}{{enter}}")
clear enter: user.rz_insert_key_sequence("clear{{enter}}")
click send: "ClickSend"
close back quote: "`"
close z: "cloze"
closure z: "clozure"
closures z: "clozures"
cloud berry: "CloudBerry"
cloud formation: "CloudFormation"
cloud front: "CloudFront"
cloud h s m : "CloudHSM"
cloud shell: "CloudShell"
cloud trail: "CloudTrail"
cloud watch: "CloudWatch"
co pilot one: "Copilot"
co point: "CoPoint"
coalesce left: "COALESCE("
coat six: "COAT"
cod dash one: "COD-1"
cod dash: "COD-"
code artifact: "CodeArtifact"
code build: "CodeBuild"
code commit: "CodeCommit"
code deploy: "CodeDeploy"
code pipeline: "CodePipeline"
code star: "CodeStar"
codet three: "Codet"
codet six: "CODET"
codet user: "CODET User"
cog paf six: "COGPAF"
cognito one: "Cognito"
coles enter: user.rz_insert_key_sequence("Coles{{enter}}")
colon back: ":\\"
colon boolean: ": boolean"
colon colon colon: ":::"
colon colon l: user.rz_insert_key_sequence("::{{Z1L}}")
colon colon s: user.rz_insert_key_sequence("::{{space}}")
colon colon: "::"
colon enter: user.rz_insert_key_sequence(":{{enter}}")
colon n zero: ":N0"
colon new line: user.rz_insert_key_sequence(":{{enter}}")
colon no s: ":"
colon number: ": number"
colon promise left: user.rz_insert_key_sequence(": Promise<>{{left}}")
colon quote: ":""
colon s l: user.rz_insert_key_sequence(": {{Z1L}}")
colon s: ": "
colon slash slash: "://"
colon string: ": string"
colon void: ": void"
color u: "colour"
colour o: "color"
com bank: "CommBank"
combo box seven: "comboBox"
combo box: "ComboBox"
comma zero right p: ", 0)"
comma brian: ", Brian"
comma m under: ", m_"
comma ronny: ", Ronny"
command let: "cmdlet"
commander one: "Commander"
commenter colon: "commenter:"
commit id colon: user.rz_insert_key_sequence("commit id: ""{{left}}")
compare dash: "Compare-"
comprehend one: "Comprehend"
computer enter: user.rz_insert_key_sequence("Computer{{enter}}")
computer share: "Computershare"
con cat left: "concat("
con cat: "concat"
conda dash: "conda-"
connect one: "Connect"
connect os: "connectOS"
console dot log: "console.log(`"
context dot get value: "context.GetValue("
context dot set value: "context.SetValue("
control alt one: user.rz_insert_key_sequence("{{ctrl-alt-1}}")
control alt four: user.rz_insert_key_sequence("{{ctrl-alt-4}}")
control romeo: user.rz_insert_key_sequence("{{ctrl-r}}")
control shift victor: user.rz_insert_key_sequence("{{ctrl-v}}")
copy and go: user.rz_insert_key_sequence("{{ctrl-c}}{{ctrl-u}}")
copy dash: "Copy-"
copy email to clipboard: user.rz_insert_key_sequence("{{enter}}{{wait:1000}}{{Ctrl+a}}{{Ctrl+c}}{{wait:1000}}{{heardword:"[Close Window]"}}")
copy end key left: user.rz_insert_key_sequence("{{shift-end}}{{shift-left}}{{ctrl-c}}")
copy house key slow: user.rz_insert_key_sequence("{{Shift+Home}}{{wait:200}}{{Shift+Home}}{{Ctrl+c}}")
core sera: "Coursera"
corner under flag equals y: "CORNER_FLAG = 'Y'"
cosmos d b : "CosmosDB"
covert p i under: "CovertPI_"
covid dash nineteen: "COVID-19"
cry engine: "CRYENGINE"
cull de sack: "cul-de-sac"
curb or us: "Kerberos"
cust p b dep: "CustPbdep"
cyber bank: "Cyberbank"
d one under: "D1_"
d two under: "D2_"
d three under: "D3_"
d a five: "da"
d a six: "DA"
d a c: "dac"
d a g six: "DAG"
d a i d: "DAId"
d a l: "dal"
d a p six: "DAP"
d a r six: "DAR"
d a t: "dat"
d a under: "DA_"
d a x six: "DAX"
d b five: "db"
d b seven: "db"
d b a: "dba"
d b data: "DbData"
d b dot t three medium: "db.t3.medium"
d b dot t three small: "db.t3.small"
d b forge: "dbForge"
d b g error: "DBG_ERROR"
d b g event: "DBG_EVENT"
d b g exit error: "DBG_EXIT_ERROR"
d b g exit: "DBG_EXIT"
d b g function: "DBG_FUNCTION(""
d b g note: "DBG_NOTE"
d b g return: "DBG_RETURN_"
d b g thread: "DBG_THREAD(""
d b g trace: "DBG_TRACE"
d b g under: user.rz_insert_key_sequence("DBG_{{Z6}}")
d b g verbose: "DBG_VERBOSE"
d b o five: "dbo"
d b o: "dbo"
d b parameter: "DbParameter"
d b r: "dbr"
d b s: "dbs"
d b under all: "DB_ALL"
d c a six: "DCA"
d c d six: "DCD"
d c d: "dcd"
d d six: "DD"
d d e: "dde"
d d fix: "DdFix"
d d k: "DDK"
d d o s : "DDoS"
d d p six: "DDP"
d d r dash: "DDR-"
d d r under: "DDR_"
d d r: "ddr"
d e c twenty two: "DEC22"
d e c six: "DEC"
d e c: "dec"
d e f n: "defn"
d e f s: "defs"
d e f: "def"
d e j a i: "dejai"
d e l i m: "delim"
d e l: "del"
d e m six: "DEM"
d e m: "dem"
d e p: "dep"
d e r six: "DER"
d e s c: "Desc"
d e s t: "dest"
d e v: "dev"
d e x a : "DEXA"
d e x a six: "DEXA"
d f five: "df"
d f six: "DF"
d f c e six: "DFCE"
d f e i t: "dfeit"
d f t: "dft"
d g tech: "DGtek"
d g v: "dgv"
d h c p six: "DHCP"
d h l six: "DHL"
d h t m l : "DHTML"
d i b: "DIB"
d i c t: "dict"
d i d six: "DID"
d i dees : "DIDs"
d i f f: "diff"
d i j k: "dijk"
d i m a: "Dima"
d i r enter: user.rz_insert_key_sequence("dir{{enter}}")
d i r s: "dirs"
d i r space: user.rz_insert_key_sequence("dir{{space}}")
d i r: "dir"
d i r one: "Dir"
(d i r | dir | DIR) thing: "dir"
brief directory: "dir"
d i s p: "disp"
d i s t: "dist"
d i v: "div"
d k i m six: "DKIM"
d l elves : "DLLs"
d l g: "dlg"
d l l six: "DLL"
d l l: "dll"
d l p six: "DLP"
d link: "D-Link"
d m s six: "DMS"
d n seven l i b: "Dn7Lib"
d n l i b: "DnLib"
d n s six: "DNS"
d n s: "dns"
d o five: "do"
d o b six: "DOB"
d o c s: "docs"
d o c: "doc"
d o d: "dod"
d o f six: "DOF"
d o m: "dom"
d o n t: "dont"
d o t net core: "Dot.NET Core"
d o t net framework: "Dot.NET Framework"
d o t net: "Dot.NET"
d o t: "dot"
d p i d six: "DPID"
d p i d: "dpid"
d p i: "dpi"
d q n six: "DQN"
d r five: "dr"
d r six: "DR"
d r e m e l: "dremel"
d r o r: "Dror"
d r p : "DRP"
d r p six: "DRP"
d r s six: "DRS"
d s l six: "DSL"
d s l a m: "dslam"
d s m six: "DSM"
d tack dash one hundred: "DTAC-100"
d to p: "DToP"
d u b: "dub"
d u e: "due"
d u i: "dui"
d v d five: "dvd"
d v dot l: user.rz_insert_key_sequence("dv.{{Z1L}}")
d v i r: "Dvir"
d word s: "DWORD "
d word t: user.rz_insert_key_sequence("DWORD{{tab}}")
darrell one l: "Darrel"
dash zero one: "-01"
dash zero two: "-02"
dash zero three: "-03"
dash zero four: "-04"
dash zero five: "-05"
dash zero six: "-06"
dash zero seven: "-07"
dash zero eight: "-08"
dash zero nine: "-09"
dash ten: "-10"
dash eleven: "-11"
dash twelve: "-12"
dash thirteen: "-13"
dash fourteen: "-14"
dash fifteen: "-15"
dash sixteen: "-16"
dash seventeen: "-17"
dash eighteen: "-18"
dash nineteen: "-19"
dash two alpha: "-2a"
dash two charlie: "-2c"
dash twenty eighteen: "-2018"
dash twenty twenty: "-2020"
dash twenty twenty one: "-2021"
dash twenty: "-20"
dash twenty one: "-21"
dash twenty two: "-22"
dash twenty three: "-23"
dash twenty four: "-24"
dash twenty five: "-25"
dash twenty six: "-26"
dash twenty seven: "-27"
dash twenty eight: "-28"
dash twenty nine: "-29"
dash thirty: "-30"
dash thirty one: "-31"
dash a p i : "-API"
dash after dash: "-after-"
dash alpha six: "-A"
dash and dash: "-and-"
dash bravo six: "-B"
dash cap alpha: "-A"
dash cap bravo: "-B"
dash choose: "-Tue"
dash claire to ronny: "- Claire to Ronny -"
dash force: " -Force "
dash fry: "-Fri"
dash full: " -Full"
dash i a : "-IA"
dash i d five: "-id"
dash id: " -ID"
dash in dash: "-in-"
dash l: user.rz_insert_key_sequence("-{{Z1L}}")
dash mon: "-Mon"
dash name: " -Name "
dash not equals: " -ne "
dash not s: "-not "
dash nothing relevant: user.rz_insert_key_sequence("- Nothing relevant{{enter}}")
dash of dash: "-of-"
dash property: " -Property "
dash r z: "-rz"
dash ronny to claire: "- Ronny to Claire -"
dash ronny to yael: "- Ronny to Yael -"
dash sat: "-Sat"
dash space: user.rz_insert_key_sequence("-{{space}}")
dash sue: "-Thu"
dash sun: "-Sun"
dash tab key: user.rz_insert_key_sequence("-{{tab}}")
dash to dash: "-to-"
dash victor two: "-v2"
dash wed: "-Wed"
dash windows: "-windows"
dash x x six: "-XX"
dash x x: "-xx"
dash yael to ronny: "- Yael to Ronny -"
data  dist: "DataDist"
data dash: "DATA-"
data frame: "DataFrame"
data grid view seven: "dataGridView"
data grid view: "DataGridView"
data grid: "DataGrid"
data jet: "Datajet"
data license: "DataLicense"
data lists: "Datalists"
data row: "DataRow"
data set three: "DataSet"
data set edition: "DatasetEdition"
data set id: "DatasetId"
data set: "dataset"
data sets: "datasets"
data store: "DataStore"
data sync: "DataSync"
data table five: "datatable"
data table: "DataTable"
data view: "dataview"
dataset a p i one: "DatasetApi"
dataset id seven: "datasetId"
datasets a p i one: "DatasetsApi"
date tab who: user.rz_insert_key_sequence("Date{{tab}}Who")
date time: "DateTime"
date under six: "DATE_"
date under created six: "DATE_CREATED"
date under modified six: "DATE_MODIFIED"
dav ron: "DavRon"
david jensen: "David Jensen"
david jensonberg: "davidjensonberg"
day or night: "DayOrNight"
de whyn: "De-Whyn"
dear code commit: "d:\\CodeCommit"
dear git hub o s r : "D:\\github\\osr"
dear medical: "d:\\obsidian\\medical"
dear o s r: "d:\\github\\osr\\"
dear obsidian my stuff: "d:\\obsidian\\obsidian\\MyStuff\\"
dear obsidian people: "d:\\obsidian\\obsidian\\people\\"
dear obsidian: "d:\\obsidian\\obsidian\\"
dear organizations: "d:\\obsidian\\obsidian\\organisations"
dear talon user: "c:\\users\\ronny\\AppData\\Roaming\\talon\\user"
dear tax receipts: "e:\\documents\\finance\\tax\\2024\\receipts"
december twenty twenty two: "December 2022"
deck tree: "deckTree"
deep fake: "deepfake"
deep racer: "DeepRacer"
delete dash: "Delete-"
delete house key hash: user.rz_insert_key_sequence("{{shift-home}}{{del}}#")
delete key tab: user.rz_insert_key_sequence("{{del}}{{tab}}")
delete space: user.rz_insert_key_sequence("{{del}}{{space}}")
delete tab key: user.rz_insert_key_sequence("{{del}}{{tab}}")
delete that: user.rz_insert_key_sequence("{{del}}")
delta colon back: "d:\\"
delta colon enter: user.rz_insert_key_sequence("D:{{enter}}")
delta temp back: "d:\\temp\\"
dem dash: "DEM-"
demo one: "demo1"
desk one: "DESK1"
desk two: "DESK2"
desk five: "DESK5"
dest d l l lib: "DESTDLLLib"
detective one: "Detective"
dev art: "Devart"
dev kit: "DevKit"
dev ops: "DevOps"
dev under data: "DEV_DATA"
device i  o  control: "DeviceIoControl"
dialog result: "DialogResult"
dictionary left: "Dictionary<"
dingo blue: "dingoblue.net.au"
dir delta temp back: "d:\\temp\\"
dir medical reports: "d:\\obsidian\\medical\\reports"
direct connect: "Direct Connect"
directory  point cook: "E:\\Documents\\Callpoint\\Customers\\Ericsson\\Stage 1\\PointCook"
directory echo temp: "e:\\temp"
directory f d r: "E:\\FDR"
directory latest p s m a: "D:\\_MMO\\PSMA\\2018_11"
directory obsidian medical: "d:\\obsidian\\medical"
directory obsidian organisations: "d:\\obsidian\\obsidian\\organisations"
directory papa temp back: "P:\\temp\\"
directory software logs: "c:\\sw\\logs"
directory tax receipts: "e:\\documents\\finance\\tax\\2023\\receipts"
directory temp back: "c:\\temp\\"
directory temp logs: "c:\\temp\\logs"
directory temp: "c:\\temp"
dirty five: "35"
dirty six: "36"
disk part enter: user.rz_insert_key_sequence("diskpart{{enter}}")
do c m d: "DoCmd."
do dump bin: "C:\\PROGRA~1\\MICROS~3\\VC98\\Bin\\DUMPBIN.EXE "
do g a c util: "C:\\PROGRA~1\\MICROS~2.NET\\SDK\\v1.1\\Bin\\gacutil.exe "
do modal: "DoModal()"
do production: " ::== "
do reg a s m: "C:\\WINDOWS\\MICROS~1.NET\\FRAMEW~1\\V11~1.432\\RegAsm.exe "
do v c vars thirty two: user.rz_insert_key_sequence("C:\\PROGRA~1\\MICROS~3\\VC98\\Bin\\VCVARS32.BAT{{enter}}")
doc you sign: "DocuSign"
doctor forner: "Dr Forner"
doctor giri: "Dr Giri"
doctor levin: "Dr Levin"
doctor mundell: "Dr Mundell"
doctor o o i: "Dr Ooi"
doctor shill off: "Dr Chilov"
doctor spar: "Dr Spahr"
doctor we: "Dr Ooi"
doctor wettstein: "Dr Wettstein"
documents amatek: "D:\\Documents\\Amatek"
documents callpoint: "C:\\Users\\ronny\\Documents\\CallPoint"
documents codet: "D:\\Documents\\Amatek\\Codet"
documents my diary: user.rz_insert_key_sequence("C:\\Documents and Settings\\ronny\\My Documents\\{{personal}}\\Personal Growth\\diary 2009.doc")
documents organizations: "C:\\Users\\ronny\\Documents\\Organisations"
documents paddington: user.rz_insert_key_sequence("C:\\Documents and Settings\\ronny\\My Documents\\{{personal}}\\M&E\\Paddington")
dollar forty five z m h: "$45zmH"
dollar at quote: "$@""
dollar dollar huge: user.rz_insert_key_sequence("$\\huge ${{left}}")
dollar dollar large: user.rz_insert_key_sequence("$\\large ${{left}}")
dollar dollar left: user.rz_insert_key_sequence("$${{left}}")
dollar dollar right arrow: "$\\rightarrow$"
dollar e n v colon: "$env:"
dollar env colon path: "$env:path"
dollar env colon: "$env:"
dollar error enter: user.rz_insert_key_sequence("$Error{{enter}}")
dollar global colon l: user.rz_insert_key_sequence("$global:{{Z1L}}")
dollar i d x: "$idx"
dollar l alpha: "$a"
dollar l file one: "$file1"
dollar l: user.rz_insert_key_sequence("${{Z1L}}")
dollar latest six: "$LATEST"
dollar left brace l: user.rz_insert_key_sequence("${{{{}}{{Z1L}}")
dollar left dollar right: user.rz_insert_key_sequence("$($){{left}}")
dollar left right brace left l: user.rz_insert_key_sequence("${{{{}}}}{{Left}}{{Z1L}}")
dollar left right left: user.rz_insert_key_sequence("$(){{left}}")
dollar left: "$("
dollar name: "$name"
dollar null: "$null"
dollar quote: "$""
dollar result: "$result"
dollar s t r dot: "$str."
dollar s t r: "$str"
dollar sign brace l: user.rz_insert_key_sequence("${{{{Z1L}}")
dollar sign brace: user.rz_insert_key_sequence("${{l-brace}}{{}}")
dollar sign dollar: "$$"
dollar sign l: user.rz_insert_key_sequence("${{Z1L}}")
dollar sign sign: "$$"
dollar true: "$True"
dollar under dot: "$_."
domain one: "Domain"
door dash: "DoorDash"
dos c d: "cd "
dos key: "doskey"
dot  one dot  one: ".1.1"
dot  begin: ".begin()"
dot  data: ".data()"
dot  dot  slash: "../"
dot  first: ".first"
dot  format t: ".Format(_T(""
dot  format: ".Format("
dot  get: ".Get"
dot  is: ".Is"
dot  second: ".second"
dot  v t: ".vt"
dot six: user.rz_insert_key_sequence(".{{Z6}}")
dot a p a : ".APA"
dot add: ".Add"
dot any: ".Any("
dot append: ".Append"
dot are equal: ".AreEqual("
dot are: ".Are"
dot by: ".by("
dot c p six: ".CP"
dot c s t r: ".c_str()"
dot checked: ".Checked"
dot clear: ".Clear"
dot close: ".Close"
dot columns: ".Columns"
dot combine: ".Combine("
dot count: ".Count"
dot d dot t s: ".d.ts"
dot d o: ".Do("
dot debug: ".Debug("
dot dot enter: user.rz_insert_key_sequence("..{{enter}}")
dot dot right angle bracket: user.rz_insert_key_sequence("{{space}}..>{{space}}")
dot e b extensions: ".ebextensions"
dot enabled: ".Enabled"
dot equals to: ".EqualsTo("
dot equals: ".Equals("
dot error: ".Error("
dot form bang left: ".Form!["
dot from: ".From"
dot get value: ".GetValue("
dot group: ".group()"
dot has label: ".hasLabel("
dot has value: ".HasValue"
dot has: ".Has"
dot height: ".Height"
dot index: ".Index"
dot info format: ".InfoFormat("
dot info: ".Info("
dot instance dot: ".Instance."
dot instance: ".Instance"
dot items: ".Items"
dot key: ".Key"
dot keys: ".Keys"
dot left: ".Left"
dot length: ".length"
dot list: ".List"
dot log line two: ".LogLine2("
dot log line: ".LogLine("
dot log: ".Log"
dot m under: ".m_"
dot message: ".Message"
dot n e t sixty six: ".NET 6"
dot name: ".Name"
dot net four point eight: ".NET4.8"
dot net five: "dotnet"
dot net seven: ".NET 7"
dot net core: ".NET Core"
dot net e f: "dotnet ef"
dot net framework: ".NET Framework"
dot net lambda: "dotnet Lambda"
dot net standard: ".NET Standard"
dot net tool: "dotnet tool"
dot new line: ".NewLine"
dot non: ".Non"
dot now: ".Now"
dot only: ".only"
dot open: ".Open("
dot read: ".Read"
dot root: ".Root"
dot s c six: ".SC"
dot set: ".Set"
dot show: ".Show("
dot string: ".String"
dot style: ".Style"
dot t p g : ".TPG"
dot t x t space: ".txt "
dot tables: ".Tables"
dot talon: ".talon"
dot test dot t s enter: user.rz_insert_key_sequence(".test.ts{{enter}}")
dot test dot t s: ".test.ts"
dot text: ".Text"
dot throws lambda: ".Throws(() => "
dot to array: ".ToArray"
dot to be: ".toBe"
dot to equal: ".toEqual("
dot to list: ".ToList"
dot to string: ".ToString()"
dot to: ".To"
dot total: ".Total"
dot try: ".Try"
dot type: ".Type"
dot under l: user.rz_insert_key_sequence("._{{Z1L}}")
dot unfold: ".unfold("
dot value map: ".valueMap("
dot value of: ".valueOf("
dot value s: ".values("
dot value: ".Value"
dot visible: ".Visible"
dot width: ".Width"
dot write line: ".WriteLine("
dot write: ".Write"
dot y: ".Y"
dot zip: ".zip"
dr gator: "Dr Jager"
drop down one: "DropDown"
dub and: " -and "
dub as i n t: " -as [int]"
dub at braces: user.rz_insert_key_sequence("@{{l-brace}}{{}}n='';e={{l-brace}}{{}}{{r-brace}}{{r-brace}}{{left}}{{left}}")
dub cast string: "[string]"
dub catch: "Catch"
dub destination: " -Destination "
dub do: "Do"
dub else: "Else"
dub equals: " -eq "
dub false: "$false"
dub force: " -Force"
dub full: " -Full"
dub function block: user.rz_insert_key_sequence("Function (){{space}}{{l-brace}}{{}}{{enter}}{{r-brace}}{{enter}}{{up}}{{up}}{{end}}{{enter}}{{tab}}{{up}}{{ctrl-right}}")
dub function: "Function "
dub get help: "Get-Help "
dub get: "Get-"
dub greater than: " -gt "
dub host: "Host "
dub if: "If ("
dub in: " in "
dub less than or equal: " -le "
dub like: " -Like"
dub mandatory equals true: "Mandatory = $True"
dub measure: "Measure-"
dub name: " -Name "
dub new block large: user.rz_insert_key_sequence("{{enter}}{{l-brace}}{{}}{{enter}}{{r-brace}}{{enter}}{{up}}{{up}}{{end}}{{enter}}{{tab}}")
dub new block: user.rz_insert_key_sequence("{{space}}{{l-brace}}{{}}{{enter}}{{r-brace}}{{enter}}{{up}}{{up}}{{end}}{{enter}}{{tab}}")
dub not equals: " -ne "
dub not like: " -NotLike"
dub not match: " -NotMatch"
dub not: " -Not "
dub null: "$null"
dub or: " -or "
dub pass through: " -PassThru"
dub path: " -Path "
dub prams left: "Params("
dub profile name: user.rz_insert_key_sequence("{{space}}-ProfileName{{space}}")
dub property star: " -Property *"
dub ps provider: " -PSProvider"
dub recurse: " -Recurse"
dub seconds: " -Seconds "
dub split on semi: " -Split ";""
dub split: user.rz_insert_key_sequence("{{space}}-Split ")
dub sum: " -Sum"
dub test path: "Test-Path "
dub true: "$true"
dub type string: "[String]"
dub verbose: " -Verbose"
dub version: " -Version "
dub what if: " -WhatIf"
dub while: "While ("
due date: "DueDate"
due to: "due to"
duplicate that: user.rz_insert_key_sequence("{{Ctrl+c}}{{Ctrl+v}}{{Ctrl+v}}")
dynamo d b: "DynamoDB"
e b six: "EB"
e b s six: "EBS"
e b s dash backed: "EBS-backed"
e b under six: "EB_"
e bay: "ebay"
e book: "ebook"
e c two six: "EC2"
e c two volume: "EC2Volume"
e c two: "EC2"
e c six: "EC"
e c a j : "ECAJ"
e c g one: "ECG-1"
e c g four: "ECG-4"
e c g six: "ECG"
e c g seven: "ECG-7"
e c g nine: "ECG-9"
e c g dash zero: "ECG-0"
e c g util: "EcgUtil"
e c g: "ecg"
e c r six: "ECR"
e c s six: "ECS"
e com com: "EComCOM"
e com: "ECom"
e connect plus: "eConnectPlus"
e d t: "edt"
e d v : "EDV"
e d v six: "EDV"
e dot a p a : "E.APA"
e dot s c : "E.SC"
e dot: "e."
e e five: "ee"
e e six: "EE"
e e a s: "eeas"
e e r: "eer"
e e route one: "EeRoute"
e e route: "EE Route"
e e under: "EE_"
e e white list: "EE Whitelist"
e e zoning one: "EeZoning"
e e zoning: "EE Zoning"
e eye: "eye"
e f five: "ef"
e f a r r: "EfArr"
e f a s: "efas"
e f d i r: "EfDir"
e f d: "efd"
e f p b r: "EfPbr"
e f s six: "EFS"
e f t : "EFT"
e fail: "E_FAIL"
e g g: "egg"
e k g six: "EKG"
e k s six: "EKS"
e l five: "el"
e l b six: "ELB"
e l e y: "Eley"
e l i e: "Elie"
e l i: "Eli"
e l p i six: "ELPI"
e l5 dot: "el."
e m c six: "EMC"
e m o j i: "emoji"
e m r six: "EMR"
e m r dash: "emr-"
e m r f s : "EMRFS"
e m r: "emr"
e n t six: "ENT"
e n t s: "ents"
e n t: "ent"
e n u m: "enum"
e n v colon: "env:"
e n v: "env"
e o f six: "EOF"
e o f: "eof"
e o l six: "EOL"
e p l b : "EPLB"
e p l b six: "EPLB"
e p l bees: "EPLBs"
e p s g : "epsg"
e p s g six: "EPSG"
e q five: "eq"
e q: "eq"
e r c p : "ERCP"
e r c p six: "ERCP"
e r e v: "erev"
e r f s: "erfs"
e r r s t r: "ErrStr"
e r r: "err"
e s a six: "ESA"
e s a: "esa"
e s g : "ESG"
e s p thirty two: "ESP32"
e s r i : "ESRI"
e s r i five: "esri"
e s r i: "esri"
e t a six: "ETA"
e t effs: "ETFs"
e t f six: "ETF"
e t l six: "ETL"
e t s i six: "ETSI"
e t s i: "etsi"
e t u: "etu"
e under a p a: "E_APA"
e v five: "ev"
e v six: "EV"
e v a l: "eval"
e v c three: "evc3"
e v c: "evc"
e v t: "evt"
e w k b six: "EWKB"
e x one enter: user.rz_insert_key_sequence("ex1{{enter}}")
e x five: "ex"
e x c: "exc"
e x e c: "exec"
e x e r six: "EXER"
e x e: "exe"
e x p r: "expr"
e x p: "exp"
e x t: "ext"
e y e: "eye"
e y l o n: "Eylon"
e z six: "EZ"
ear buds: "earbuds"
earth sized: "earth-sized"
easy card: "EasyCard"
echo colon back: "e:\\"
echo space: "echo "
edge cliff: "Edgecliff"
elana zulaikha: "Elana Zulaikha"
elastic cache: "Elasticache"
elastic search: "Elasticsearch"
em goo: "emgu"
email brian g mail: "brian.beckor@gmail.com"
email except only: user.rz_insert_key_sequence("(email excerpt only, full email see ){{left}}")
email rob mar: "robmar@hear-here.com.au"
email william g mail: "wlombardibj@gmail.com"
end capitalize: user.rz_insert_key_sequence("")
end dash user: "end-user"
end function: "End Function"
end lowercase: user.rz_insert_key_sequence("")
end name space: "End Namespace"
end no space: user.rz_insert_key_sequence("")
end point: "endpoint"
end select: "End Select"
end uppercase: user.rz_insert_key_sequence("")
end using: "End Using"
end while: "WEnd"
energy australia: "EnergyAustralia"
enter tab l: user.rz_insert_key_sequence("{{enter}}{{Tab}}{{Z1L}}")
enter tab: user.rz_insert_key_sequence("{{end}}{{enter}}{{tab}}")
enterprise ethernet one: "EnterpriseEthernet"
enterprise ethernet: "Enterprise Ethernet"
equals zero: " = 0"
equals column left p: "=COLUMN("
equals equals: "=="
equals false five: " = false"
equals m under: " = m_"
equals new: " = new "
equals null five: " = null"
equals null: " = NULL"
equals quote quote left: user.rz_insert_key_sequence("=""{{left}}")
equals quote quote: " = """
equals s: "= "
equals sign at: "=@"
equals single quote y: " = 'Y'"
equals string: " = String"
equals true five: " = true"
equals victor: "=V"
err m s g: "ErrMsg"
err s t r: "ErrStr"
esa under code six: "ESA_CODE"
essential one: "Essential"
event a r g s: "EventArgs"
event bridge: "EventBridge"
event bus: "EventBus"
ex cali draw: "Excalidraw"
excerpt from s: user.rz_insert_key_sequence("excerpt from{{space}}")
excerpt full email: user.rz_insert_key_sequence("(Excerpt full email{{space}}){{left}}")
excerpt only: "(Excerpt only... full notes at )"
exchange info: "ExchangeInfo"
exit function: "Exit Function"
exit sub: "Exit Sub"
expected dot: "expected."
expected r f s : "Expected RFS"
export dash: "Export-"
f a a s: "FaaS"
f a q: "FAQ"
f a r six: "FAR"
f arrow: "-{r-brace}"
f c p six: "FCP"
f c p: "fcp"
f c s six: "FCS"
f d six: "FD"
f d c a six: "FDCA"
f d r six: "FDR"
f d r under: "FDR_"
f d s six: "FDS"
f d s: "fds"
f dot: "f."
f e five: "fe"
f e b twenty one: "FEB21"
f e b twenty two: "FEB22"
f e b twenty three: "FEB23"
f e b: "feb"
f e p six: "FEP"
f i f o six: "FIFO"
f i f o: "fifo"
f i l: "fil"
f l i r: "flir"
f l u: "flu"
f level: "fevel"
f m five: "fm"
f m six: "FM"
f m e six: "FME"
f m o six: "FMO"
f m o d: "fmod"
f n five: "fn"
f n a six: "FNA"
f n n six: "FNN"
f o f i: "fofi"
f o i six: "FOI"
f o i: "foi"
f o r e: "fore"
f o r: "for"
f p five: "fp"
f p l: "fpl"
f q d n six: "FQDN"
f r e q: "freq"
f r m: "frm"
f s five: "fs"
f s a six: "FSA"
f s a designation: "FSA Designation"
f s a m six: "FSAM"
f s a m: "fsam"
f s a: "fsa"
f s dot el: user.rz_insert_key_sequence("fs.{{Z1L}}")
f s m: "fsm"
f s r s six: "FSRS"
f s x : "FSx"
f sam six: "FSAM"
f sams: "FSAMs"
f sound under: "FSOUND_"
f t p s : "FTPS"
f t p: "ftp"
f t t b: "fttb"
f t t c six: "FTTC"
f t t n six: "FTTN"
f t t n: "fttn"
f t t p six: "FTTP"
f t t p: "fttp"
f t t x: "fttx"
f u n c: "func"
f y eighteen: "FY18"
f y nineteen: "FY19"
f y twenty twenty three: "FY2023"
f y twenty two: "FY22"
f y twenty three: "FY23"
f y twenty four: "FY24"
f y twenty five: "FY25"
f y i at brian: "FYI @Brian"
fabula tech: "FabulaTech"
fail over: "failover"
failed result: "FAILED(Result)"
falcon nine: "FALCON9"
false five: "false"
far gate: "Fargate"
far hood: "Farhud"
fat thirty two: "FAT32"
feature u r l: "FeatureUrl"
feb nineteen: "FEB19"
feb twenty ronny annexure: "FEB20_RONNY_ANNEXURE"
feb twenty: "FEB20"
feb dash twenty twenty: "feb-2020"
february twenty twenty two: "February 2022"
feed forward: "feedforward"
feeling lucky: user.rz_insert_key_sequence("{{Ctrl+.}}{{wait:200}}{{enter}}")
feet dash: "feat-"
fibre asset: "fibre asset"
fibre con x: "FibreconX"
fibre expansion program one: "FibreExpansionProgram"
fibre expansion program: "Fibre Expansion Program"
fibre on net: "fibre On-Net"
fibre pit one: "FibrePit"
fibre pit three: "Fibre Pit"
fibre pit seven: "fibrePit"
fibre vision: "Fibervision"
file id seven: "fileId"
file info: "FileInfo"
file set seven: "fileSet"
file set: "FileSet"
file time: "FILETIME"
file zilla: "FileZilla"
filename i d: "FilenameId"
fill dash in: "fill-in"
fill under in six: "FILL_IN"
find in files: user.rz_insert_key_sequence("{{ctrl-f}}")
fire fox: "firefox"
first f: "first"
five err: "fiverr"
flat slash level: "flat/level"
flat under number six: "FLAT_NUMBER"
flavor u: "flavour"
flow chart: "flowchart"
fly buys: "flybuys"
folder enter: "folder"
form bay: "Formbay"
format dash: "Format-"
format left p: "FORMAT("
forms bang left: "Forms!["
fort e gate: "FortiGate"
fortnight e: "fortnite"
four minus signs: "----"
fox tell: "Foxtel"
foxtrot under: "F_"
free call: "freecall"
freeable memory: "Freeable Memory"
frog e: "froggy"
from b b colon: "From BB:"
from b b: "From BB"
from colon alex: user.rz_insert_key_sequence("From: Alex{{enter}}")
from colon brian: user.rz_insert_key_sequence("From: Brian{{enter}}")
from colon claire: user.rz_insert_key_sequence("From: Claire{{enter}}")
from colon margaret: "From: Margaret"
from colon: "From:"
front end: "front-end"
front matter: "frontmatter"
full stop: "."
fy dough six: "FIDO"
g a six: "GA"
g a d: "gad"
g a dem: "GA DEM"
g a discussions: "GA disc"
g a l i a: "Galia"
g a l i t: "Galit"
g a l i: "Gali"
g and d: "G&D"
g b six: "GB"
g b l: "gbl"
g b: "gb"
g c five: "gc"
g c c s a: "gccsa"
g d a nineteen ninety four: "GDA1994"
g d a twenty twenty: "GDA2020"
g d a ninety four: "GDA94"
g d a l six: "GDAL"
g d a l: "gdal"
g d b six: "GDB"
g d b: "gdb"
g d i five: "gdi"
g d p r : "GDPR"
g dal six: "GDAL"
g dal info three: "GdalInfo"
g dal prams seven: "gdalParams"
g dal prams dot: "gdalParams."
g dal slash o g r : "GDAL/OGR"
g dal under: "gdal_"
g dal warp: "GdalWarp"
g dash n a f: "G-NAF"
g dash naf: "G-NAF"
g dot six: "G."
g dot v: "g.V()"
g e d two: "ged2"
g e d cadastre info: "GedCadastreInfo"
g e d: "ged"
g e n: "gen"
g e o c: "geoc"
g e o datum: "GeoDatum"
g e o m: "geom"
g e o: "geo"
g f c: "gfc"
g g six: "GG"
g g a six: "GGA"
g g m six: "GGM"
g g o x six: "GGOX"
g g t six: "GGT"
g g under v : "GG_V"
g g under: "GG_"
g h d six: "GHD"
g h g six: "GHG"
g i five: "gi"
g i six: "GI"
g i dot: "gi."
g i o : "GIO"
g i r i: "Giri"
g i s : "gis"
g i s five: "gis"
g i s six: "GIS"
g i s assets: "GIS Assets"
g i s boundaries: "GIS Boundaries"
g i s t a : "GISTA"
g i t: "git"
g j x : "GJX"
g j x under: "GJX_"
g k strata: "GK Strata"
g mail: "gmail"
g n a f five dash: "gnaf-"
g n a f six: "GNAF"
g n a f: "gnaf"
g naf six: "GNAF"
g naf augmented: "G-NAF Augmented"
g naf core: "G-NAF Core"
g naf dash: "gnaf-"
g naf extended data: "GnafExtendedData"
g naf geocode mean : "GNAF_GEOCODE_MEAN"
g naf geocoder: "GNAF Geocoder"
g naf no nap: "GnafNoNap"
g naf pid seven: "gnafPid"
g naf slash x f l : "GNAF/XFL"
g naf under pid: "GNAF_PID"
g naf under: "GNAF_"
g o t o: "goto"
g o x six: "GOX"
g p two five: "gp2"
g p three five: "gp3"
g p six: "GP"
g p s : "GPS"
g p s five: "gps"
g p s tools net: "GpsToolsNET"
g p t : "GPT"
g p t three: "GPT-3"
g p t six: "GPT"
g p u : "GPU"
g r c six: "GRC"
g r d six: "GRD"
g r d: "grd"
g r e p space: user.rz_insert_key_sequence("grep{{space}}")
g r e p: "grep"
g r p c : "gRPC"
g r p: "grp"
g r u six: "GRU"
g s six: "GS"
g s admin bounds: "GSAdmin Bounds"
g s eyes : "GSIs"
g s i six: "GSI"
g s m five: "gsm"
g s property: "GSProperty"
g s roads: "GSRoads"
g s s u six: "GSSU"
g s s u: "gssu"
g s t: "GST"
g t e: "gte"
g t r six: "GTR"
g u i five: "gui"
g u i six: "GUI"
g u i d six: "GUID"
g u i: "gui"
g under g s : "G_GS"
g under: "g_"
g v x: "gvx"
g w l b six: "GWLB"
g w l: "gwl"
gahba dash: "GAHBA-"
gant t: "Gantt"
gap geocode three: "Gap Geocode"
gary at hot mail: "gazzaturner@hotmail.com"
gem plus: "GemPlus"
gen one: "Gen 1"
gen two: "Gen 2"
gen three: "Gen 3"
geo database: "geodatabase"
geo jason: "GeoJSON"
geo scape: "Geoscape"
geo sciences: "Geosciences"
geo tiff six: "GEOTIFF"
geo vision: "Geovision"
geoc address detail: "GeocoderAddressDetail"
geock dash: "GEOC-"
geocode under type code six: "GEOCODE_TYPE_CODE"
geocoded paf: "Geocoded PAF"
geocoder options one: "GeocoderOptions"
geocoder result two: "GeocoderResult2"
geok dash one: "GEOC-1"
geok dash two: "GEOC-2"
geok dash three: "GEOC-3"
geok dash four: "GEOC-4"
geok dash: "GEOC-"
geok support: "Geoc support"
geoscape two point zero: "Geoscape 2.0"
geoscape extra: "Geoscape Extra"
geoscape oz: "GeoscapeAU"
geoscape under: "GEOSCAPE_"
get dash: "Get-"
get under: "get_"
gis ta: "GISTA"
gista dash: "GISTA-"
git branch delete: user.rz_insert_key_sequence("git branch --delete{{space}}")
git branch enter: user.rz_insert_key_sequence("git branch{{enter}}")
git branch v v: user.rz_insert_key_sequence("git branch -vv{{enter}}")
git branch: "git branch"
git checkout: user.rz_insert_key_sequence("git checkout{{space}}")
git hub: "GitHub"
git k all enter: user.rz_insert_key_sequence("gitk --all{{enter}}")
git k: "gitk"
git lens: "GitLens"
git log ten: user.rz_insert_key_sequence("git log -n 10{{enter}}")
git log enter: user.rz_insert_key_sequence("git log{{enter}}")
git log s: user.rz_insert_key_sequence("git log{{space}}")
git merge no commit: "git merge --no-commit "
git remote: user.rz_insert_key_sequence("git remote{{space}}")
git space: user.rz_insert_key_sequence("git{{space}}")
git status enter: user.rz_insert_key_sequence("git status{{enter}}")
git switch: user.rz_insert_key_sequence("git switch{{space}}")
git work tree list: user.rz_insert_key_sequence("git worktree list{{enter}}")
git worktree s: user.rz_insert_key_sequence("git worktree{{space}}")
global sat: "GlobalSat"
global under: "global_"
gnaf under pid: "GNAF_PID"
go daddy five: "godaddy"
go daddy: "GoDaddy"
google dot proto buf dot: "google.protobuf."
grammar cardinality: "GrammarCardinality"
grammar gender: "GrammarGender"
grammar person: "GrammarPerson"
grammar tense: "GrammarTense"
grand stream: "Grandstream"
graph q l : "GraphQL"
graph x: "GraphX"
green space: "greenspace"
grep space: user.rz_insert_key_sequence("grep{{space}}")
grid view: "GridView"
ground truth: "Ground Truth"
group under six: "GROUP_"
guard duty: "GuardDuty"
guard time: "guardtime"
gum tree: "Gumtree"
h a three: "Ha"
h a m a s: "Hamas"
h a t: "hat"
h a x m : "HAXM"
h break: "<br/>"
h c f : "HCF"
h c f six: "HCF"
h c t: "HCT"
h class equals: user.rz_insert_key_sequence("class=""{{left}}")
h d d six: "HDD"
h d f s six: "HDFS"
h d m i : "HDMI"
h e c six: "HEC"
h e x: "hex"
h e y: "hey"
h f c six: "HFC"
h f c: "hfc"
h f l one six: "HFL1"
h f l six: "HFL"
h f l delta: "HFL Delta"
h f l p f l : "HFL/PFL"
h f l p f l three: "HflPfl"
h f l u dash: "HFLU-"
h f l: "hfl"
h g o x six: "HGOX"
h g r: "hgr"
h g under six: "HG_"
h h five: "hh"
h h annotated: "HhAnnotated"
h h audio: "HhAudio"
h h c s: "HhCs"
h h code: "HhCode"
h h debug: "HhDebug"
h h earth: "HhEarth"
h h form five: "hhForm"
h h forms five: "hhForms"
h h g p s: "HhGps"
h h geometry: "HhGeometry"
h h grid: "HhGrid"
h h logger: "HhLogger"
h h m: "hhm"
h h maps: "HhMaps"
h h message box: "HhMsgBox"
h h p: "hhp"
h h player: "HhPlayer"
h h point: "HhPoint"
h h postcode: "2010"
h h recorder: "HhRecorder"
h h rectangle: "HhRectangle"
h h simulator: "HhSimulator"
h h street address: "61 Marlborough Street"
h h studio: "HhStudio"
h h t t: "hhtt"
h h t: "hht"
h h trip: "HhTrip"
h h watchdog: "HhWatchdog"
h i n six: "HIN"
h i s t: "hist"
h key: "HKEY"
h line break: "<br/>"
h m d six: "HMD"
h mark important: user.rz_insert_key_sequence("{{space}}!important")
h mod: "hmod"
h nikud: "nikud"
h o u z z: "houzz"
h p c six: "HPC"
h p s six: "HPS"
h paragraph open: "<p>"
h paragraph: "<p>"
h r five: "hr"
h r e f: "href"
h r r l six: "HRRL"
h r r l m r p : "HRRL/MRP"
h r r l: "hrrl"
h result s: "HRESULT "
h result t: user.rz_insert_key_sequence("HRESULT{{tab}}")
h result: "HRESULT"
h s l six: "HSL"
h t m l six: "HTML"
h t m l element: "HTMLElement"
h t m l: "html"
h t t p six: "HTTP"
h t t p colon: "http://"
h t t p dash: "HTTP-"
h t t p s six: "HTTPS"
h t t p s: "https"
h t t p w: "http://www."
h t t p: "http"
h t w six: "HTW"
h triple c: "HCCC"
h w l six: "HWL"
h w l e : "HWLE"
h w l e dash: "HWLE-"
h w n d six: "HWND"
h w n d: "hWnd"
h x five: "hx"
ha bud: "Chabad"
hands free: "handsfree"
harabeleben: "Shit in your yogurt"
harbour quays: "Harbour Quays"
hark ham: "Harkham"
has under geometry: "HAS_GEOMETRY"
has under residential: "HAS_RESIDENTIAL"
hash zero: "#0"
hash one: "#1"
hash ten: "#10"
hash thirteen: "#13"
hash seventeen: "#17"
hash two: "#2"
hash twenty: "#20"
hash twenty eight: "#28"
hash three: "#3"
hash thirty: "#30"
hash thirty six: "#36"
hash thirty seven: "#37"
hash thirty eight: "#38"
hash four: "#4"
hash forty: "#40"
hash forty eight: "#48"
hash five: "#5"
hash fifty: "#50"
hash fifty eight: "#58"
hash six: "#6"
hash seven fifty: "#750"
hash seven: "#7"
hash eight: "#8"
hash eighty seven: "#87"
hash nine: "#9"
hash cards jewish history: "#flashcards/jewish/history"
hash cards m l: "#flashcards/ml"
hash cards slash: "#flashcards/"
hash course slash: "#course/"
hash define: user.rz_insert_key_sequence("#define ")
hash else: user.rz_insert_key_sequence("#else{{enter}}")
hash end if enter: user.rz_insert_key_sequence("#endif{{wait:250}}{{enter}}a")
hash end if: user.rz_insert_key_sequence("#endif{{enter}}")
hash end region: "#endregion"
hash flash card slash: "#flashcard/"
hash flashcards: "#flashcards"
hash hash three s: user.rz_insert_key_sequence("###{{space}}")
hash hash space: user.rz_insert_key_sequence("##{{space}}")
hash if define win thirty two: "#ifdef WIN32"
hash if define: "#ifdef "
hash if dot net c f: user.rz_insert_key_sequence("#if DotNetCf{{enter}}")
hash if not defined: "#ifndef "
hash if not now: "#if NotNow"
hash ifndef: "#ifndef "
hash import: "#import ""
hash include angle l: user.rz_insert_key_sequence("#include <>{{Left}}{{Z1L}}")
hash include angle: user.rz_insert_key_sequence("#include <.h>{{left}}{{left}}{{left}}")
hash include include: user.rz_insert_key_sequence("#include "..\\include\\.h"{{left}}{{left}}{{left}}")
hash include: user.rz_insert_key_sequence("#include ".h"{{left}}{{left}}{{left}}")
hash medical info: "#medical-info"
hash org slash: "#org/"
hash person slash: "#person/"
hash pragma: "#pragma "
hash q a w s : "----"
hash q data science: "----"
hash q m l: user.rz_insert_key_sequence("----{{enter}}#flashcards/ml{{wait:200}}{{enter}}{{enter}}# Questions{{enter}}{{enter}}")
hash q math: user.rz_insert_key_sequence("----{{enter}}#flashcards/math{{wait:200}}{{enter}}{{enter}}# Questions{{enter}}{{enter}}")
hash q physics: user.rz_insert_key_sequence("----{{enter}}#flashcards/science/physics{{wait:200}}{{enter}}{{enter}}# Questions{{enter}}{{enter}}")
hash questions enter: user.rz_insert_key_sequence("# Questions{{enter}}")
hash region: "#region"
hash review: "#review"
hash set left: "HashSet<"
hash set: "HashSet"
hash sign four: "#4"
hash space: user.rz_insert_key_sequence("#{{space}}")
hash stephen: "#st3v3nmw"
hash table: "Hashtable"
hash tag: "#tag"
hash undefine: "#undef "
hat one: "^1"
hat two: "^2"
hat ninety nine: "^99"
hat one third: user.rz_insert_key_sequence("^{{l-brace}}{{}}\\frac 1 3{{r-brace}}")
hat parentheses one: user.rz_insert_key_sequence("^{{(1)}}")
hat parentheses two: user.rz_insert_key_sequence("^{{(2)}}")
hat parentheses three: user.rz_insert_key_sequence("^{{(3)}}")
hat parentheses four: user.rz_insert_key_sequence("^{{(4)}}")
hat parentheses five: user.rz_insert_key_sequence("^{{(5)}}")
hat parentheses india: user.rz_insert_key_sequence("^{{l-brace}}{{}}(i){{r-brace}}")
hat parentheses juliet: user.rz_insert_key_sequence("^{{(j)}}")
hat parentheses kilo: user.rz_insert_key_sequence("^{{(k)}}")
hat parentheses mike: user.rz_insert_key_sequence("^{{l-brace}}{{}}(m){{r-brace}}")
hat parentheses: user.rz_insert_key_sequence("^{{l-brace}}{{}}(){{r-brace}}{{left}}{{left}}")
hat slash: "^/"
hat t h: user.rz_insert_key_sequence("^{{th}}")
hat x-ray: "^x"
head six: "HEAD"
hear here one: "HearHere"
hear here five: "hearhere"
hear here a b n: "86 113 905 570"
hear here a c n: "113 905 570"
hear here dot: "HearHere."
hear here r z: "hearhererz"
hear hyphen here: "hear-here"
hebrew bread: "challah"
hebrew complete healing: "Refuah Shlemah"
hebrew dash: "hebrew-"
hebrew happy new year: "Shana Tova"
hebrew phrase: "HebrewPhrase"
hebrew source: "HebrewSource"
hebrew word one: "HebrewWord"
hello mars three: user.rz_insert_key_sequence("")
help s: user.rz_insert_key_sequence("help{{space}}")
help stars left: user.rz_insert_key_sequence("help **{{left}}")
hi ashlesha: "Hi Ashlesha"
hi at brian: user.rz_insert_key_sequence("Hi @{{wait:1000}}Brian")
hi at: "Hi @"
hi brian comments: user.rz_insert_key_sequence("Hi Brian, comments?{{enter}}{{enter}}")
hi guys: user.rz_insert_key_sequence("Hi Guys{{enter}}")
hi ha: "Hi Ha"
hi jenny: "Hi Jenny"
hi no g: "Hi"
high pages: "hipages"
high tail one: "Hightail"
high tail: "hightail"
hire h: "Haier"
hload: "hload 2 sct.hex"
home key delete: user.rz_insert_key_sequence("{{home}}{{del}}")
home key mark: user.rz_insert_key_sequence("{{home}}!")
home track: "Hometrack"
host gator: "HostGator"
hot dock: "HotDoc"
hot mail: "hotmail"
hotel three: "H3"
hotel colon: "h:"
hybrid geocoder: "Hybrid Geocoder"
hyper v: "Hyper-V"
i one six seven: "i167"
i one eighty: "i180"
i phone: "iPhone"
i pod: "iPod"
i prime us: "iPrimus"
i  b  a  p: "ibap"
i a six: "IA"
i a a s: "IaaS"
i a c: "IaC"
i a m six: "IAM"
i a t a : "IATA"
i button: "iButton"
i c r six: "ICR"
i c r: "icr"
i c s m : "ICSM"
i cloud: "iCloud"
i d five: "id"
i d six: "ID"
i d d six: "IDD"
i d d: "idd"
i d descending: "ID DESC"
i d e n t: "ident"
i d equals five: "id="
i d f six: "IDF"
i d o k: "IDOK"
i d s six: "IDS"
i d s under: user.rz_insert_key_sequence("IDS_{{Z6}}")
i d under n b n : "ID_NBN"
i d x: "idx"
i dash med: "I-Med"
i data: "iData"
i disposable: "IDisposable"
i dot: "i."
i e seven: "IE7"
i enumerable left: "IEnumerable<"
i enumerable: "IEnumerable"
i equitable: "IEquatable"
i f triple t : "IFTTT"
i g five: "ig"
i g i s: "IGis"
i g w six: "IGW"
i go: "iGO"
i h h: "IHh"
i herb: "iHerb"
i i c six: "IIC"
i i f: "iif"
i i s : "IIS"
i i s six: "IIS"
i l d a s m: "ildasm"
i l dasm: "ildasm "
i l r six: "ILR"
i l r review: "[ILR Review]"
i lambda i dot: "i => i."
i m g: "img"
i m h o six: "IMHO"
i m o six: "IMO"
i m p l: "impl"
i m u six: "IMU"
i m u t: "imut"
i med: "I-MED"
i n c i t s: "incits"
i n c: "inc"
i n f o: "info"
i n f: "inf"
i n g six: "ING"
i n g: "ing"
i n i t: "init"
i n m: "inm"
i n s five: "ins"
i n s six: "INS"
i n s t: "inst"
i n s: "ins"
i n t l: "intl"
i n t p t r: "IntPtr"
i n t point: "IntPoint"
i n t: "int"
i o one: "io1"
i o two: "io2"
i o five: "io"
i o six dot: "IO."
i o c t elves: "IOCTLs"
i o c: "IoC"
i o p s : "IOPS"
i o t three: "IoT"
i o t core: "IoT Core"
i o t green grass: "IoT Greengrass"
i o1 five: "io1"
i p five: "ip"
i p c c : "IPCC"
i p v four: "IPv4"
i p v six: "IPv6"
i pack: "iPaq"
i pad: "iPad"
i q r six: "IQR"
i r discussions: "IR disc"
i r l : "IRL"
i r p: "irp"
i r peas: "IRPs"
i s o six: "ISO"
i s o: "iso"
i s r six: "ISR"
i s r s: "ISrs"
i s r: "isr"
i saver: "iSaver"
i t six: "IT"
i t i l six: "ITIL"
i t r o : "ITRO"
i t r o six: "ITRO"
i tunes: "iTunes"
i ungroup: user.rz_insert_key_sequence("{{ctrl-g}}")
i unknown: "IUnknown"
i v l: "ivl"
i v r : "IVR"
i w i w d : "IWIWD"
i w m six: "IWM"
iiterator: "IIterator"
id consulting: "id Consulting"
if def debug: user.rz_insert_key_sequence("#ifdef _DEBUG{{enter}}")
import dash module: "Import-Module"
import dash: "Import-"
in five: "in"
in box: "inbox"
in car: "in-car"
in progress: "In Progress"
include back: "include\\"
info sec: "InfoSec"
initialize dash: "Initialize-"
ink scape: "Inkscape"
input under five: "input_"
insta gram: "Instagram"
install dash: "Install-"
instance id one: "InstanceId"
inter mod: "Intermod"
interop dot: "Interop."
intruder one: "Intruder"
is dot equal to: "Is.EqualTo("
is not null: " is not null"
is null left p: "IsNull("
isoma five: "isoma"
issue dash ten: "Issue-10"
item property: "ItemProperty"
j not equals: " !== "
j a b r a: "jabra"
j a n: "jan"
j a s : "Jas"
j b d : "JBD"
j c a : "JCA"
j c a six: "JCA"
j dollar this: "$(this)"
j e s t: "Jest"
j equals: " === "
j g six: "JG"
j i b i n: "Jibin"
j i t: "jit"
j j six: "JJ"
j l l six: "JLL"
j n f : "JNF"
j o n o: "Jono"
j p e g: "jpeg"
j q l: "jql"
j s five: "js"
j s o n: "json"
j t t six: "JTT"
j t t: "jtt"
j u l a i: "Julai"
j u l: "jul"
j u n twenty two: "JUN22"
j u n twenty three: "JUN23"
j u n: "jun"
j v six: "JV"
j var: "var "
j w t : "JWT"
j w t six: "JWT"
jequals three: user.rz_insert_key_sequence("{{space}}==={{space}}")
jack green: "Jackgreen"
january twenty nineteen: "January 2019"
january twenty twenty three: "January 2023"
jason six: "JSON"
java c: "javac "
java s: "java "
java script five: "javascript"
java script: "JavaScript"
jazz three: "Jas"
jeera six: "JIRA"
jet star: "Jetstar"
jim kirk: "Jim Kirk"
jira five: "jira"
jira no format: user.rz_insert_key_sequence("{{noformat}}")
jira quote: user.rz_insert_key_sequence("{{quote}}{{quote}}{{left}}{{left}}{{left}}{{left}}{{left}}{{left}}{{left}}")
jira table line: user.rz_insert_key_sequence("|||{{enter}}{{up}}{{right}}")
join dash: "Join-"
juggle no e: "Juggl"
july twenty twenty two: "July 2022"
june twenty twenty six: "JUNE2020"
june twenty twenty two: "June 2022"
jupiter y: "Jupyter"
jupyter lab: "JupyterLab"
jurisdiction under id six: "JURISDICTION_ID"
k a f k a: "Kafka"
k b six: "KB"
k c six: "KC"
k dash means: "k-means"
k diff three: "KDiff3"
k e five: "ke"
k e m o: "kemo"
k e n n: "Kenn"
k e r a s: "keras"
k g two: "KG2"
k h six: "KH"
k i d d u s h: "kiddush"
k m five: "km"
k m l six: "KML"
k m l: "kml"
k m s six: "KMS"
k m z six: "KMZ"
k n six: "KN"
k n expanded: "Kehilat Nitzan"
k n n six: "KNN"
k o b o: "kobo"
k p i six: "KPI"
k to dollars: "KTo$N(?N2;X"
k u b i e: "Kubie"
k u n d a n: "Kundan"
k v p six: "KVP"
k v p string string: "KvpStringString"
k v p: "kvp"
ken two ens: "Kenn"
key cat l: user.rz_insert_key_sequence("")
key dash: "key-"
key pass: "keepass"
key set: "keyset"
key sets: "keysets"
key value pairs: "KeyValuePairs"
kilo five: "k"
knack dan: "nakdan"
l a h a v: "Lahav"
l a t: "lat"
l b l: "lbl"
l c s i six: "LCSI"
l e d five: "led"
l e e o r: "Leeor"
l e n: "len"
l e v i n: "Levin"
l e v y: "Levy"
l g six: "LG"
l g a six: "LGA"
l g a under name six: "LGA_NAME"
l g a: "lga"
l g p s: "lgps"
l g t m : "LGTM"
l h s six: "LHS"
l i b: "lib"
l i d a r: "lidar"
l i dot: "i."
l i n q: "linq"
l k six: "LK"
l l five: "ll"
l m five: "lm"
l m a o : "LMAO"
l m s six: "LMS"
l o a: "LoA"
l o c: "loc"
l o l: "lol"
l o s three: "LoS"
l o s six: "LOS"
l o s: "los"
l p six: "LP"
l p byte: "LPBYTE"
l p c byte: "LPCBYTE"
l p c s t r: "LPCSTR"
l p c void: "LPCVOID"
l p g s six: "LPGS"
l p t one: "LPT1"
l p void: "LPVOID"
l p w s t r: "LPWSTR"
l s five: "ls"
l s enter: user.rz_insert_key_sequence("ls{{enter}}")
l s eyes : "LSIs"
l s i six: "LSI"
l s minus l: "ls -l"
l s p: "lsp"
l s s a : "LSSA"
l s space: "ls "
l s t m six: "LSTM"
l s t p: "lstp"
l s t: "lst"
l t d three: "Ltd"
l t e: "lte"
l t r six: "LTR"
l t r: "ltr"
l t s six: "LTS"
l y n x: "lynx"
laasot: "to do"
label seven: "label"
lambda at edge: "Lambda@Edge"
land tenure: "Land Tenure"
land v i c : "LandVIC"
laser six: "LASER"
last write time: "LastWriteTime"
lat long: "LatLong"
lat slash long: "lat/long"
latin one: "latin1"
left eighty right: "[80]"
left angle bracket right left: user.rz_insert_key_sequence("<>{{left}}")
left angle bracket slash right: user.rz_insert_key_sequence("</>{{left}}")
left angle t right: "<T>"
left awaiting: user.rz_insert_key_sequence("[Awaiting ] {{left}}{{left}}")
left brace one right: user.rz_insert_key_sequence("{{l-brace}}{{}}1{{r-brace}}")
left brace two right: user.rz_insert_key_sequence("{{l-brace}}{{}}2{{r-brace}}")
left brace three right: user.rz_insert_key_sequence("{{l-brace}}{{}}3{{r-brace}}")
left brace brace: user.rz_insert_key_sequence("{{l-brace}}{{}}{{l-brace}}{{}}")
left brace bracket right: user.rz_insert_key_sequence("{{l-brace}}{{}}[]{{r-brace}}{{left}}{{left}}")
left brace delete back: user.rz_insert_key_sequence("{{l-brace}}{{del}}{{backspace}}")
left brace l: user.rz_insert_key_sequence("{{{{Z1L}}")
left brace right left: user.rz_insert_key_sequence("{{l-brace}}{{}}{{r-brace}}{{left}}")
left brace s: "{ "
left bracket bracket bar left: user.rz_insert_key_sequence("[[|{{left}}")
left bracket bracket bar: user.rz_insert_key_sequence("|{{left}}[[")
left bracket bracket c: "[["
left bracket bracket: "[["
left bracket hat: "[^"
left bracket l: user.rz_insert_key_sequence("[{{Z1L}}")
left bracket quote: "[""
left bracket space quote: "[ ""
left bracket space: "[ "
left cancelled right: "[cancelled]"
left draft right: "(draft)"
left duplicate right: "[Duplicate]"
left e mail right: "(email)"
left email excerpt: user.rz_insert_key_sequence("(email excerpt, full email ){{left}}")
left g right: "(G)"
left hotel right: "(h)"
left hours right: "(hours)"
left i right: "[i]"
left in one right: "[In] "
left in right: "[in] "
left index right: "[Index]"
left juliet right: "[j]"
left k k bar: user.rz_insert_key_sequence("[[|{{left}}")
left k k c: "[["
left k k: "[["
left left p: "left("
left m right space: user.rz_insert_key_sequence("[M] {{left}}{{left}}")
left math colon colon: "[Math]::"
left minor right: "[Minor]"
left no format right: user.rz_insert_key_sequence("{{noformat}}")
left out one right: "[Out] "
left out right: "[out] "
left p back quote: "(`"
left p delete: user.rz_insert_key_sequence("({{wait:800}}{{Del}}")
left p dollar l: user.rz_insert_key_sequence("(${{Z1L}}")
left p dollar: "($"
left p i right: "(i)"
left p l: user.rz_insert_key_sequence("({{Z1L}}")
left p star right p: "(*)"
left paren l: user.rz_insert_key_sequence("({{Z1L}}")
left partial right: "(partial)"
left proposed right: "[Proposed]"
left remarks right: "<remarks>"
left right angle left: user.rz_insert_key_sequence("<>{{left}}")
left right brace left l: user.rz_insert_key_sequence("{{{{}}}}{{Left}}{{Z1L}}")
left right brace left: user.rz_insert_key_sequence("{{l-brace}}{{}}{{r-brace}}{{left}}")
left right bracket as: user.rz_insert_key_sequence("[] as{{space}}")
left right bracket ellipses: "[...]"
left right bracket hat: user.rz_insert_key_sequence("[^]{{left}}")
left right bracket left: user.rz_insert_key_sequence("[]{{left}}")
left right bracket s: "[] "
left right bracket: "[]"
left right colon colon: "[]::"
left right lambda: "() => "
left right p hash: user.rz_insert_key_sequence("(#){{left}}")
left right p left l: user.rz_insert_key_sequence("(){{Left}}{{Z1L}}")
left right p left: user.rz_insert_key_sequence("(){{left}}")
left right p: "()"
left right semi: "();"
left s right: "(s)"
left star right: "(*)"
left star this right: "(*this)"
left umbrella right: "(umbrella)"
left x-ray right: "(x)"
left x i colon: "<xi:"
left x s colon: "<xs:"
left zero right: "[0]"
legal parcel id six: "LEGAL_PARCEL_ID"
let me know: "let me know"
let us know: "let us know"
level under geocoded code: "LEVEL_GEOCODED_CODE"
level under number six: "LEVEL_NUMBER"
lib dash zero: "LIB-0"
license i d: "LicenseId"
light sail: "LightSail"
like star star: user.rz_insert_key_sequence("like "**"{{left}}{{left}}")
lima two norm: "L2-norm"
lima two: "L2"
limit zero comma: "LIMIT 0, "
line brace line: user.rz_insert_key_sequence("{{enter}}{{l-brace}}{{}}{{enter}}")
line no seven: "lineNo"
linked in: "LinkedIn"
list box seven: "listBox"
list bracket: "List<"
list brackets: user.rz_insert_key_sequence("List<>{{left}}")
list enter: user.rz_insert_key_sequence("list{{enter}}")
list left: "List<"
list of: "List(Of "
list type: "listType"
live under: "Live_"
local d b : "LocalDB"
local host: "localhost"
locality under name: "LOCALITY_NAME"
locality under neighbour: "LOCALITY_NEIGHBOUR"
locality under p i d six: "LOCALITY_PID"
lock i d three: "LocId"
lock i d seven: "locId"
lock id brian: "LocID"
lock under i dees: "LOC_IDs"
lock under id: "LOC_ID"
log four net: "log4net"
log id: "logId"
log output: "LogOutput"
long five: "long"
lot under number six: "LOT_NUMBER"
lowercase next: user.rz_insert_key_sequence("{{Z1L}}")
m two: "m2"
m two dot r z: "m2.rz"
m three dot large: "m3.large"
m three dot: "m3."
m five dot: "m5."
m a six: "MA"
m a c: "mac"
m a p i five: "mapi"
m a p i: "MAPI"
m a r twenty three: "MAR23"
m a r: "mar"
m a t h: "math"
m a x i: "maxi"
m audio: "M-Audio"
m b five: "mb"
m b s a : "MBSA"
m b slash s : "MB/s"
m c g: "mcg"
m c q six: "MCQ"
m connect: "Kinect"
m d b six: "MDB"
m d b: "mdb"
m d m six: "MDM"
m d u six: "MDU"
m d u under address six: "MDU_ADDRESS"
m d u under i d : "MDU_ID"
m d u: "mdu"
m d use: "MDUs"
m dot do: "m.Do("
m dot s g dot: user.rz_insert_key_sequence("m.{{space}}sg.")
m dot: "m."
m down: user.rz_insert_key_sequence("{{f1}}")
m e d: "med"
m e m: "mem"
m e r six: "MER"
m e r a v: "Merav"
m e s s: "mess"
m e x: "mex"
m f five: "mf"
m f six: "MF"
m f a six: "MFA"
m f a delete: "MFA Delete"
m f a: "mfa"
m f c: "mfc"
m g r: "mgr"
m i c h a l: "Michal"
m i d: "mid"
m i f: "mif"
m i g: "mig"
m i m e: "mime"
m i n a: "Mina"
m i n y a n: "minyan"
m i n: "min"
m i o: "Mio"
m i s c: "misc"
m i y a: "Miya"
m is parent of: user.rz_insert_key_sequence("{{space}}<|--{{space}}")
m is used by: user.rz_insert_key_sequence("{{space}}--o{{space}}")
m k d i r space: user.rz_insert_key_sequence("mkdir{{space}}")
m k docs: "mkdocs"
m l six: "ML"
m l c six: "MLC"
m l lib: "MLLib"
m m five: "mm"
m m six: "MM"
m m c: "mmc"
m m m m : "MMMM"
m m m y y : "MMMYY"
m m o six: "MMO"
m m o dash one: "MMO-1"
m m o dash two: "MMO-2"
m m o dash: "MMO-"
m m o: "mmo"
m m s six: "MMS"
m m: "mm"
m o d: "mod"
m p three: "mp3"
m q t six: "MQT"
m q t t six: "MQTT"
m r i six: "MRI"
m r p six: "MRP"
m r p: "mrp"
m r r six: "MRR"
m r r p six: "MRRP"
m r r: "mrr"
m r u: "mru"
m s five: "ms"
m s a six: "MSA"
m s b six: "MSB"
m s d n: "MSDN"
m s f : "MSF"
m s g box: "MsgBox"
m s g: "msg"
m s i: "msi"
m s k six: "MSK"
m s m six: "MSM"
m s s q l : "MSSQL"
m s v c: "msvc"
m slash h: "MRP/HRRL"
m t c f : "MTCF"
m t c f six: "MTCF"
m t m: "mtm"
m t o six: "MTO"
m t under six: "MT_"
m t under i d six: "MT_ID"
m to r: "M to R"
m u five: "mu"
m u k u l: "Mukul"
m under h: "m_h"
m up: user.rz_insert_key_sequence("{{f2}}")
m v c six: "MVC"
m v c: "mvc"
m w s six: "MWS"
m w s: "mws"
m wave: "mwave"
m x net: "MXNet"
m y o b : "MYOB"
m z six: "MZ"
m z slash r z : "MZ/RZ"
maatarotze: "what do you want"
mack nard jif: "MAKNARDJIFF"
mail item one: "MailItem"
main address three: "Main Address"
main and m d u : "MAIN_AND_MDU"
main under address six: "MAIN_ADDRESS"
main under cad point: "MAIN_CAD_POINT"
main under cad polygon: "MAIN_CAD_POLYGON"
make edge and copy: user.rz_insert_key_sequence("g{{enter}}{{ctrl-c}}")
make lowercase: user.rz_insert_key_sequence("{{ctrl-u}}")
make uppercase: user.rz_insert_key_sequence("{{ctrl-u}}")
map five: "map"
map angle: "map<"
map e: "mapi"
map info: "MapInfo"
map left: "Map<"
map page: "MapPage"
map point: "MapPoint"
map reduce: "MapReduce"
map view: "MapView"
map x: "MapX"
mar twenty: "MAR20"
march twenty twenty two: "March 2022"
march twenty twenty three: "March 2023"
margaret comma ronny: "Margaret, Ronny"
maria d b : "MariaDB"
mark down: "markdown"
mark k k c: "![["
market safe: "MarketSafe"
mars two: "Mars2"
mars three six: "MARS3"
mars three hello: user.rz_insert_key_sequence("")
mars three: "Mars3"
mars four six: "MARS4"
mars five six: "MARS5"
mars six: "MARS"
mars s three: "MarsS3"
mary am: "Maryam"
math alpha layer left: user.rz_insert_key_sequence("a^{{l-brace}}{{}}[]{{r-brace}}{{left}}{{left}}")
math alpha prime: "$\\large a'$"
math alpha: user.rz_insert_key_sequence("$\\large a${{left}}")
math b to the n: "$\\large b^n$"
math bravo: user.rz_insert_key_sequence("$\\large b${{left}}")
math cap alpha: user.rz_insert_key_sequence("$\\large A${{left}}")
math cap echo: user.rz_insert_key_sequence("$\\large E${{left}}")
math cap juliet: "$\\large J$"
math cap quebec: user.rz_insert_key_sequence("$\\large Q${{left}}")
math cap sierra: user.rz_insert_key_sequence("$\\large S${{left}}")
math cap victor under mike: "$\\large V_m$"
math cap victor: user.rz_insert_key_sequence("$\\large V${{left}}")
math charlie: user.rz_insert_key_sequence("$\\large c${{left}}")
math dot: "Math."
math e hat braces: user.rz_insert_key_sequence("e^{{l-brace}}{{}}{{r-brace}}{{left}}")
math epsilon: "$\\large \\epsilon$"
math g of z: "$\\large g(z)$"
math hat two: "^2"
math hat braces: user.rz_insert_key_sequence("^{{l-brace}}{{}}{{r-brace}}{{left}}")
math hat brackets lima: user.rz_insert_key_sequence("^{{l-brace}}{{}}[l]{{r-brace}}")
math hat left: user.rz_insert_key_sequence("^{{l-brace}}{{}}left{{r-brace}}")
math hat november: "^n"
math hat right: user.rz_insert_key_sequence("^{{l-brace}}{{}}right{{r-brace}}")
math hat root: user.rz_insert_key_sequence("^{{l-brace}}{{}}root{{r-brace}}")
math india: user.rz_insert_key_sequence("$\\large i${{left}}")
math jacks: "MathJax"
math juliet t h: "$\\large j$th"
math juliet under c v: user.rz_insert_key_sequence("$\\large J_{{cv}}$")
math juliet under train: user.rz_insert_key_sequence("$\\large J_{{train}}$")
math juliet under: user.rz_insert_key_sequence("J_{{l-brace}}{{}}{{r-brace}}{{left}}")
math juliet: user.rz_insert_key_sequence("$\\large j${{left}}")
math kilo: user.rz_insert_key_sequence("$\\large k${{left}}")
math large juliet: user.rz_insert_key_sequence("$\\large ${{left}}J")
math large mike: user.rz_insert_key_sequence("$\\large ${{left}}m")
math large x-ray: user.rz_insert_key_sequence("$\\large x${{left}}")
math lima: user.rz_insert_key_sequence("$\\large l${{left}}")
math log of x-ray: "$\\large \\log(x)$"
math mike under c v: user.rz_insert_key_sequence("$\\large m_{{cv}}$")
math mu: "$\\large \\mu$"
math november: user.rz_insert_key_sequence("$\\large n${{left}}")
math papa of x-ray: user.rz_insert_key_sequence("$\\large p{{(x)}}$")
math papa under one: "$\\large p_1$"
math papa: user.rz_insert_key_sequence("$\\large p${{left}}")
math pi of s: "$\\large \\pi(s)$"
math q of s a: "$\\large Q(s, a)$"
math q of s prime a prime: "$\\large Q(s', a')$"
math sierra prime: "$\\large s'$"
math sierra: user.rz_insert_key_sequence("$\\large s${{left}}")
math subscript test: user.rz_insert_key_sequence("_{{test}}")
math subscript train: user.rz_insert_key_sequence("_{{train}}")
math under c v: user.rz_insert_key_sequence("_{{l-brace}}{{}}cv{{r-brace}}")
math under test: user.rz_insert_key_sequence("_{{l-brace}}{{}}test{{r-brace}}")
math under train: user.rz_insert_key_sequence("_{{l-brace}}{{}}train{{r-brace}}")
math vector cap echo: "\\vec E"
math vector cap foxtrot: "\\vec F"
math whiskey hat left: user.rz_insert_key_sequence("$\\large w^{{l-brace}}{{}}left{{r-brace}}$")
math whiskey hat right: user.rz_insert_key_sequence("$\\large w^{{l-brace}}{{}}right{{r-brace}}$")
math whiskey: user.rz_insert_key_sequence("$\\large w${{left}}")
math x-ray under one: "$\\large x_1$"
math x-ray under two: "$\\large x_2$"
math x-ray under: user.rz_insert_key_sequence("$\\large x_${{left}}")
math x-ray: user.rz_insert_key_sequence("$\\large x${{left}}")
math yankee: user.rz_insert_key_sequence("$\\large y${{left}}")
math zulu: user.rz_insert_key_sequence("$\\large z${{left}}")
matt s: "Mattes"
max out: "Maxout"
max under path: "MAX_PATH"
may nineteen: "MAY19"
may twenty nineteen: "May 2019"
may twenty twenty three: "May 2023"
may twenty written reasons: "MAY20_WRITTEN_REASONS"
may twenty: "MAY20"
may twenty one: "MAY21"
may twenty two: "MAY22"
may twenty three: "MAY23"
me dot: "Me."
measure dash: "Measure-"
mega pixel: "megapixel"
melbourne metro: "Melbourne Metro"
mem c p y: "memcpy("
mem set: "memset("
memo paragraph: user.rz_insert_key_sequence("{{ctrl+enter}}{{ctrl+enter}}")
memory d b : "MemoryDB"
men you h: "Menucha"
menu log enter: user.rz_insert_key_sequence("menulog{{enter}}")
menu log: "Menulog"
merge dash base: "merge-base"
merged from: "Merged from"
message box t: "MessageBox(_T(""
message box: "MessageBox"
meta data: "metadata"
method alpha: "Method A"
method bravo: "Method B"
mice six: "MICE"
micro services: "microservices"
micro v m: "microVM"
mif mid six: "MIFMID"
mike five: "m"
milli i u per litre: "mIU/L"
milli moles per l: "mmol/L"
mind fuck: "mindfuck"
mini pro: "miniPRO"
minus one: "-1"
minus ten: "-10"
minus fifteen: "-15"
minus twenty five: "-25"
minus thirty: "-30"
minus thirty five: "-35"
minus bar minus enter: user.rz_insert_key_sequence("-|-{{enter}}")
minus bravo space: "-b "
minus echo space: "-e "
minus foxtrot space: "-f "
minus india space: "-i "
minus kilo space: "-k "
minus l: user.rz_insert_key_sequence(" -{{Z1L}}")
minus lima space: "-l "
minus minus space: user.rz_insert_key_sequence("--{{space}}")
minus minus: "--"
minus out space: "-out "
minus papa space: "-p "
minus sign l: user.rz_insert_key_sequence("-{{Z1L}}")
minus sign s: user.rz_insert_key_sequence("-{{space}}")
misc search commercial: "D:\\_MMO\\Misc\\Search Commercial"
mobile pre: "MobilePre"
montefiore home: "Montefiore Home"
more telecom one: "MoreTelecom"
more telecom: "More Telecom"
move down one: user.rz_insert_key_sequence("{{down 1}}")
move down four: user.rz_insert_key_sequence("{{down 4}}")
move down five: user.rz_insert_key_sequence("{{down 5}}")
move left one: user.rz_insert_key_sequence("{{left 1}}")
move left ten: user.rz_insert_key_sequence("{{left 10}}")
move left two: user.rz_insert_key_sequence("{{left 2}}")
move left three: user.rz_insert_key_sequence("{{left 3}}")
move left four: user.rz_insert_key_sequence("{{left 4}}")
move left five: user.rz_insert_key_sequence("{{left 5}}")
move right one: user.rz_insert_key_sequence("{{right 1}}")
move right ten: user.rz_insert_key_sequence("{{right 10}}")
move right two: user.rz_insert_key_sequence("{{right 2}}")
move right three: user.rz_insert_key_sequence("{{right 3}}")
move right four: user.rz_insert_key_sequence("{{right 4}}")
move right five: user.rz_insert_key_sequence("{{right 5}}")
move up one: user.rz_insert_key_sequence("{{up 1}}")
move up ten: user.rz_insert_key_sequence("{{up 10}}")
move up two: user.rz_insert_key_sequence("{{up 2}}")
move up three: user.rz_insert_key_sequence("{{up 3}}")
move up four: user.rz_insert_key_sequence("{{up 4}}")
move up five: user.rz_insert_key_sequence("{{up 5}}")
mow callpoint then: "P:\\_MMO\\Callpoint\\2020_08"
mow geoscape now: "Y:\\_MMO\\PSMA\\2022_08"
multi a z: "Multi-AZ"
multi class: "multiclass"
multi dash: "multi-"
multi deck: "multi-deck"
multi label: "multi-label"
multi line: "multiline"
multi polygon: "Multipolygon"
mum dash: "MUM-"
mum email: "elana.zulaikha@gmail.com"
mum's email gmail: "elana.zulaikha@gmail.com"
my c v v: "295"
my cell dot: "MySel."
my e-mail: "ronzul@exemail.com.au"
my e mail callpoint: "ronzul@callpointspatial.com.au"
my email amatek: "ronnyz@amatek.com"
my email call point: "ronzul@callpointspatial.com.au"
my email e h: "ronzulhb@exemail.com.au"
my email elana: "elana.zulaikha@gmail.com"
my email g mail: "ronny.zulaikha@gmail.com"
my email hot mail: "ronnyzulaikha@hotmail.com"
my email on microsoft: "ronzul@ronzul.onmicrosoft.com"
my email z: "ronzul@zulaikha.com.au"
my email zulaikha: "ronzul@zulaikha.com.au"
my expiry: "0423"
my gov i d : "MyGovID"
my gov: "MyGov"
my home number: "(02) 9328 2575"
my i sam: "MyISAM"
my mobile one: "0414937146"
my mobile: "0414 937 146"
my name: "Ronny Zulaikha"
my phone: "9328-2575"
my s q l three: "MySql"
my s q l six: "MYSQL"
my s q l retryable conn: "MySqlRetryableConnection"
my s q l: "MySql"
my service number: "0201333925"
my session dot: "MySession."
my set: "MySet"
my street address woollahra: "26/297 Edgecliff Rd Woollahra"
my street address: "26/297 Edgecliff Rd"
my super: "MySuper"
my t p g number: "3572876"
my tab: "mitab"
my visa code: "533"
my visa debit: "4434600005975300"
my visa: "4557022001908758"
my work number: "02 9478 7940"
my yahoo: "ronzulu@yahoo.co.uk"
n slash c: "N/C"
n a five: "na"
n a b six: "NAB"
n a b: "NAB"
n a c l six: "NACL"
n a n g: "Nang"
n a t six: "NAT"
n a t speak: "NatSpeak"
n a t: "nat"
n a v: "nav"
n b six: "NB"
n b n six: "NBN"
n b n e e one: "NbnEe"
n b n p o i: "NbnPoi"
n b n under: "NBN_"
n b n: "nbn"
n b r: "nbr"
n c h six: "NCH"
n cat: "NCAT"
n d array: "ndarray"
n e e r a j: "Neeraj"
n e f o six: "NEFO"
n e f o: "nefo"
n e melbourne: "NE Melbourne"
n e t six: "NET"
n expected exception: "[ExpectedException(typeof())]"
n f s six: "NFS"
n g r o k: "ngrok"
n g wave: "NGWave"
n i k u d: "nikud"
n i l y: "Nily"
n i m h : "NiMH"
n i t e: "nite"
n l b six: "NLB"
n l p six: "NLP"
n l p: "nlp"
n l t: "nlt"
n m b six: "NMB"
n m b l: "nmbl"
n m e a: "nmea"
n m o l five: "nmol"
n n six: "NN"
n n dot r z: "nn.rz"
n o r m: "norm"
n o v twenty two under: "NOV22_"
n o v twenty three: "NOV23"
n o v: "nov"
n p dot: "np."
n p m install enter: user.rz_insert_key_sequence("npm install{{enter}}")
n p m: "npm"
n p mspace: user.rz_insert_key_sequence("npm{{space}}")
n p o s: "npos"
n s five: "ns"
n s corp: "NSCorp"
n s w : "NSW"
n s w six: "NSW"
n s w colon s: "NSW: "
n s w comma: "NSW,"
n s w t f : "NSWTF"
n s w under: "NSW_"
n slash a: "N/A"
n swag: "NSwag"
n t five: "nt"
n t six: "NT"
n t colon s: user.rz_insert_key_sequence("NT:{{space}}")
n t comma: "NT,"
n t f s : "NTFS"
n t status: "NTSTATUS"
n t under: "NT_"
n test fixture: "[TestFixture]"
n u m: "num"
n under: "N_"
n unit: "NUnit"
n v a r: "nvar"
n z five: "nz"
n z s under: "NZS_"
name colin: "Colin"
name dick head: "Dezarnaulds"
name space: "namespace"
name spaces: "namespaces"
nano leaf: "nanoleaf"
nap no gnaf: "NapNoGnaf"
nav man: "Navman"
nav point five: "navPoint"
nav point: "NavPoint"
nav tech: "NAVTEQ"
near net: "Near-Net"
necks e tell: "NexeTEL"
neo four j: "Neo4j"
net seven point zero: "net7.0"
net c f : "NETCF"
net gear: "Netgear"
net s h: user.rz_insert_key_sequence("netsh{{space}}")
network a c l : "Network ACL"
new dash: "New-"
new get: "nuget"
new line two: user.rz_insert_key_sequence("{{enter}}{{enter}}")
new line back: user.rz_insert_key_sequence("{{enter}}{{shift-tab}}")
new line bar: user.rz_insert_key_sequence("{{enter}}|")
new line l: user.rz_insert_key_sequence("{{enter}}{{Z1L}}")
new paragraph two: user.rz_insert_key_sequence("{{enter}}{{enter}}{{Z2C}}")
new paragraph bar: user.rz_insert_key_sequence("{{enter}}|")
new paragraph: user.rz_insert_key_sequence("{{enter}}{{Z2C}}")
new record: user.rz_insert_key_sequence("")
new scope: "NuSkope"
newton mark three: user.rz_insert_key_sequence("k7!Hx^Eh58{{enter}}")
next gen dot net: "NextGen.Net"
next gen: "NextGen"
next step: "NextStep"
nick scali: "Nick Scali"
night rider: "NiteRider"
nine bot s two: "Ninebot S2"
nine bot: "Ninebot"
no enter: user.rz_insert_key_sequence("No{{enter}}")
no error: "NO_ERROR"
no s q l: "NoSQL"
no space: user.rz_insert_key_sequence("")
node one: "Node1"
node two i d: "Node2Id"
node two: "Node2"
node dot j s: "Node.js"
node id: "NodeId"
non dash: "non-"
non hyphen: "non-"
non point one: "NonPoint"
non under six: "NON_"
nord v p n: "NordVpn"
north side: "Northside"
nose backquote: "`"
nose hash: "#"
not now: "NotNow"
notepad lines to spaces: user.rz_insert_key_sequence("{{ctrl-end}}{{ctrl-shift-home}}{{ctrl-v}}{{ctrl-h}}\\r\\n{{tab}}{{space}}{{alt-x}}{{alt-a}}{{esc}}{{ctrl-a}}{{ctrl-c}}")
notepad merge lines: user.rz_insert_key_sequence("{{ctrl-a}}{{ctrl-v}}{{ctrl-h}}(\\r\\n)+{{tab}}{{space}}{{alt-g}}{{alt-a}}{{esc}}{{ctrl-a}}{{ctrl-c}}")
notepad reformat bullets: user.rz_insert_key_sequence("{{heardword:"[Notepad Merge Lines]"}}{{Ctrl+h}}\\x{{{{}}2022}}{{Space}}{{Tab}}\\r\\n-{{Space}}{{Alt+g}}{{Alt+a}}{{Esc}}{{Ctrl+a}}{{Ctrl+c}}")
nov nineteen: "NOV19"
nov twenty: "NOV20"
november twenty twenty two: "November 2022"
november dash: "n-"
novo tell: "Novotel"
nspector one: "Inspector"
null five: "null"
num pie: "numpy"
number five: "number"
number combo: "NumberCombo"
number sign three ninety: "#390"
number sign five: "#5"
number sign l: user.rz_insert_key_sequence("#{{Z1L}}")
number sign s: "# "
number under first six: "NUMBER_FIRST"
o a six: "OA"
o a c six: "OAC"
o a i six: "OAI"
o a u t h: "OAuth"
o auth: "OAuth"
o b i e: "Obie"
o b j: "obj"
o c i six: "OCI"
o c r six: "OCR"
o c t eighteen: "OCT18"
o c t six: "OCT"
o c t: "oct"
o code block: "```"
o comment: user.rz_insert_key_sequence("%%%%{{left}}{{left}}")
o d b c six: "ODBC"
o d b c: "odbc"
o d i: "Odi"
o dash dash: user.rz_insert_key_sequence("{{space}}o--{{space}}")
o data view: user.rz_insert_key_sequence("```dataview{{enter}}")
o f a s six: "OFAS"
o f a s: "ofas"
o f e r: "Ofer"
o f f: "off"
o footnote colon: user.rz_insert_key_sequence("[^]:{{space}}{{left}}{{left}}{{left}}")
o g m six: "OGM"
o g r : "OGR"
o g r six: "OGR"
o g r: "ogr"
o h a n a: "Ohana"
o h and s: "OH&S"
o h s: "ohs"
o info: user.rz_insert_key_sequence("> [!INFO]{{enter}}")
o k five: "ok"
o k six: "OK"
o l a p six: "OLAP"
o l e d b : "OleDb"
o l e: "ole"
o l y a: "Olya"
o link brackets: user.rz_insert_key_sequence("[](){{left}}")
o m e o: "Omeo"
o m g six: "OMG"
o media: "oOhmedia"
o n c: "onc"
o note enter: user.rz_insert_key_sequence("> [!NOTE]{{enter}}")
o note r z: user.rz_insert_key_sequence("> [!NOTE] RZ:{{space}}")
o note: user.rz_insert_key_sequence("> [!NOTE]{{space}}")
o o i: "Ooi"
o o m six: "OOM"
o p five: "op"
o p g six: "OPG"
o p s six: "OPS"
o p s works: "OpsWorks"
o p s: "ops"
o p t i: "opti"
o parentheses one: user.rz_insert_key_sequence("==(1)=={{space}}")
o parentheses two: user.rz_insert_key_sequence("==(2)=={{space}}")
o parentheses three: user.rz_insert_key_sequence("==(3)=={{space}}")
o parentheses four: user.rz_insert_key_sequence("==(4)=={{space}}")
o parentheses five: user.rz_insert_key_sequence("==(5)=={{space}}")
o parentheses six: user.rz_insert_key_sequence("==(6)=={{space}}")
o parentheses seven: user.rz_insert_key_sequence("==(7)=={{space}}")
o parentheses eight: user.rz_insert_key_sequence("==(8)=={{space}}")
o parentheses nine: user.rz_insert_key_sequence("==(9)=={{space}}")
o parentheses x s: user.rz_insert_key_sequence("==()=={{space}}{{left}}{{left}}{{left}}{{left}}")
o parentheses x: user.rz_insert_key_sequence("==()=={{space}}{{left}}{{left}}{{left}}{{left}}")
o python: user.rz_insert_key_sequence("```python{{enter}}")
o question: "> [!QUESTION] "
o quote: "> [!QUOTE] "
o r c six: "ORC"
o r g: "org"
o r i g: "orig"
o s five: "os"
o s f six: "OSF"
o s f: "osf"
o s g e o: "OSGeo"
o s i six: "OSI"
o s i: "osi"
o s r six: "OSR"
o s r core: "OsrCore"
o s r dot work trees: "osr.worktrees"
o s r r: "osrr"
o s r: "osr"
o t six: "OT"
o t p six: "OTP"
o t t six: "OTT"
o table template: "| Col1 | Col2 | "
o u six: "OU"
o use: "OUs"
o warning: user.rz_insert_key_sequence("> [!WARNING]{{enter}}")
o yam l: user.rz_insert_key_sequence("---{{enter}}{{enter}}---{{up}}")
o z five: "oz"
o z: "oz"
object five s: "object "
october twenty twenty one: "October 2021"
october twenty twenty two: "October 2022"
off net: "Off-Net"
ole d b: "OleDb"
ole tech: "Olitech"
olive fields: "Olivefields"
on dash: "on-"
on net one: "OnNet"
on net three: "OnNet"
on net six: "ONNET"
on net: "On-Net"
once off: "once-off"
one dash hot: "one-hot"
one drive: "OneDrive"
one note: "OneNote"
one time: "OneTime"
op ex: "OpEx"
open a i : "OpenAI"
open a p i : "OpenAPI"
open c v: "OpenCV"
open net c f: "OpenNETCF"
open s s l : "OpenSSL"
open search: "OpenSearch"
open shot: "OpenShot"
open x m l: "OpenXml"
optic one: "Optic"
options dot seven: "options."
optus under lit: "OPTUS_LIT"
or due: "OrDue"
or null one: "OrNull"
or null: " | null"
or wrong: "Orrong"
order by: "ORDER BY "
origin dash: "origin-"
origin slash: "origin/"
oscar under: "O_"
our key one: "OurKey"
our key: "OurKey"
out five s: "out "
out five: "out"
out dash: "Out-"
p one three three: "p133"
p one six: "P1"
p one dot: "p1."
p two dot: "p2."
p eight ten: "P810"
p a a g e: "paage"
p a a l: "paal"
p a a m: "paam4138"
p a a s: "PaaS"
p a f six: "PAF"
p a f: "paf"
p a p s six: "PAPS"
p a r a m s: "params"
p a r a m: "param"
p a r a: "para"
p a r e n: "paren"
p a w s root: "cI/i*HoOe!vWOA"
p a y g : "PAYG"
p and as: "Pandas"
p b five: "pb"
p b six: "PB"
p b dep six: "PBDEP"
p b dep: "pbdep"
p b e six: "PBE"
p b e: "pbe"
p b r six: "PBR"
p b under i d : "PB_ID"
p c a six: "PCA"
p c h: "pch"
p c p: "pCp"
p d f six: "PDF"
p d f: "pdf"
p d p six: "PDP"
p d s six: "PDS"
p d under: "PD_"
p dash not: "-not "
p dash or: "-or "
p digital pigeon: user.rz_insert_key_sequence("B~Js47%K\\f|{{l-brace}}{{enter}}")
p dot x: "P.X"
p e l: "pEl"
p e m six: "PEM"
p e m: "pem"
p e n: "pen"
p e r f: "perf"
p e r i s: "Peris"
p e r p: "perp"
p e r: "per"
p f a r six: "PFAR"
p f a r: "pfar"
p f l six: "PFL"
p f l: "pfl"
p f olsen: "PF Olsen"
p f x six: "PFX"
p fishing: "phishing"
p g c six: "PGC"
p g p six: "PGP"
p h e t: "phet"
p i a : "PIA"
p i d six: "PID"
p i d s: "PIDs"
p i d: "pid"
p i i six: "PII"
p i m six: "PIM"
p i n six: "PIN"
p i n v: "pinv"
p i n: "pin"
p i p u six: "PIPU"
p i p u: "pipu"
p i p: "pip"
p i r p: "pIrp"
p i v k h six: "pivKH6"
p i x: "pix"
p if dollar: "if ($"
p k pass mum: "Rabee$33#"
p k pass: user.rz_insert_key_sequence("belelI$45zmH{{enter}}")
p l dot: "pl."
p l t: "plt"
p m a p i: "pMapi"
p m format enter: user.rz_insert_key_sequence("pnpm format{{enter}}")
p m lint enter: user.rz_insert_key_sequence("pnpm lint{{enter}}")
p m run all tests: user.rz_insert_key_sequence("pnpm test{{enter}}")
p m run dev enter: user.rz_insert_key_sequence("pnpm run dev{{enter}}")
p m run single test: "pnpm run test -- tests/unit/"
p m s g: "pMsg"
p m t: "pmt"
p machine subversion: user.rz_insert_key_sequence("knSaxc;L@E!LukV@9AmkuvHXVG8O-LUx{{enter}}")
p map: "PMap"
p n g six: "PNG"
p n p six: "PNP"
p n p m: "pnpm"
p n p: "pnp"
p node: "PNode"
p o a six: "POA"
p o box three: "PoBox"
p o i six: "POI"
p o i: "poi"
p o l : "POL"
p o l y: "poly"
p o r n: "porn"
p o s six: "POS"
p o s: "pos"
p office three six five: user.rz_insert_key_sequence("cyQLCaNW+,m'93{{enter}}")
p p c six: "PPC"
p p c: "ppc"
p p m: "ppm"
p p w: "ppw"
p path: "PPath"
p prams: "params"
p prod one: user.rz_insert_key_sequence("hVR4(jjyykAEmR%mpjy5H2POa7qS%Obi{{enter}}")
p prod two: user.rz_insert_key_sequence("!XH.uP7cLDpOCyWb$YRzNyCms72ETi2D{{enter}}")
p pumble: "Pumble"
p r six s: "PRs"
p r six: "PR"
p r dash ten: "PR-10"
p r dash: "PR-"
p r e l u : "PReLU"
p r e p: "prep"
p r e v: "prev"
p r e: "pre"
p r o c: "proc"
p r o d: "prod"
p r o g: "prog"
p r o j c s: "ProjCS"
p r o j: "proj"
p r o n six: "PRON"
p r o p: "prop"
p r o t o: "proto"
p r o v: "prov"
p r o: "pro"
p r s six: "PRS"
p r s: "prs"
p reader extension: "pReaderExtension"
p s one: "ps1"
p s drive: "PSDrive"
p s m a : "psma"
p s m a six: "PSMA"
p s m a under: "PSMA_"
p s pip: "PsPip"
p s under: "PS_"
p s v six: "PSV"
p s v: "psv"
p smart card extension: "pSmartcardExtension"
p some: "Psalm"
p t r: "ptr"
p t s d : "PTSD"
p t y three: "Pty"
p to d: "PToD"
p u r i m: "Purim"
p under r pos: "p_rPos"
p under s t r: "p_str"
p under: "p_"
p w d: "pwd"
p w t six: "PWT"
p x semi: "px;"
pack map six: "PACMAP"
page a  five: "paage"
page a six: "PAAGE"
paint dot net: "Paint.net"
paling yards: "Paling Yards"
palm pilot: "Palm Pilot"
pap com six: "PAPCOM"
pap com: "Papcom"
parcel six: "PARCEL"
parcel type code six: "PARCEL_TYPE_CODE"
parcel under i d six: "PARCEL_ID"
parcel under type six: "PARCEL_TYPE"
parentheses one: "(1)"
parentheses two: "(2)"
parentheses three: "(3)"
parentheses four: "(4)"
parentheses five: "(5)"
parentheses six: "(6)"
parentheses seven: "(7)"
parentheses eight: "(8)"
parentheses nine: "(9)"
parentheses alpha: "(A)"
parentheses bravo: "(B)"
parentheses charlie: "(C)"
parentheses left: user.rz_insert_key_sequence("(){{left}}")
parentheses x-ray: user.rz_insert_key_sequence("{{l-brace}}{{}}(x){{r-brace}}")
parentheses x: user.rz_insert_key_sequence("(){{left}}")
park it q: "Parquet"
part of speech: "PartOfSpeech"
party q l : "PartiQL"
password forty four: "password44"
password azure one: "MeFMtu<{R8!g"
password less: "passwordless"
password m two dot r z: "'UR/A?hes2L;"
password n s corp: "zul3117"
password safari: "42085078"
password t t n c f: "Be#Ly$44"
password yellow: "Yellow123"
paste and go go: user.rz_insert_key_sequence("{{ctrl-v}}{{enter}}{{enter}}")
paste and slash: user.rz_insert_key_sequence("{{ctrl-v}}/")
paste and space: user.rz_insert_key_sequence("{{ctrl-v}}{{space}}")
paste end key left: user.rz_insert_key_sequence("{{shift-end}}{{shift-left}}{{ctrl-v}}")
path dot: "Path."
path enter: user.rz_insert_key_sequence("path{{enter}}")
path h h c s: "c:\\sw\\hearhere\\lib\\hhcs"
path h h studio: "c:\\sw\\hearhere\\tools\\hhstudio"
path hear here documents: "C:\\Documents and Settings\\Ronny\\My Documents\\Hear Here"
path hear here experiments: "c:\\sw\\hearhere\\experiments"
path hear here minutes: "C:\\Documents and Settings\\Ronny\\My Documents\\Hear Here\\Admin\\Minutes"
path point: "PathPoint"
path program files: "c:\\Program Files"
path releases: "d:\\releases"
path software call point: "c:\\sw\\callpoint"
path software hear here: "c:\\sw\\HearHere"
path software junk: "c:\\sw\\junk"
path software samples: "c:\\sw\\samples"
path software: "c:\\sw\\"
path v c ninety eight include: "C:\\Program Files\\Microsoft Visual Studio\\VC98\\Include"
path windows system thirty two: "c:\\windows\\system32"
path word templates: "C:\\Documents and Settings\\Ronny\\Application Data\\Microsoft\\Templates"
pay  pal: "PayPal"
pea limb: "pealim"
pea under (c): "p_"
pearson view: "PearsonVUE"
peered v p c : "peered VPC"
peg e: "peggy"
pen brothers: "Penbrothers"
pepper marketing: "Pepper Marketing"
percent  sierra: "%s"
percent zero two x-ray: "%02X"
percent lima foxtrot: "%lf"
percent lima uniform: "%lu"
percent lima x-ray: "%lX"
percent lima delta: "%ld"
percent percent left: user.rz_insert_key_sequence("%%{{left}}")
percent x-ray: "%X"
perf mon: "perfmon"
period s: ". "
phase one: "Phase 1"
phillips hue: "Phillips Hue"
phone rob mobile: "0410 677 285"
photo scan: "PhotoScan"
pi max: "Pimax"
pi spark: "PySpark"
picto nav five: "pictoNav"
picto nav item: "PictoNavItem"
picto nav: "PictoNav"
pie torch: "PyTorch"
pigeon d: "pigeoned"
pigeon ing: "pigeoning"
pin one thirty five ninety two: "95201578"
pinpoint one: "Pinpoint"
pip c lib: "PipCLib"
pip defs: "PipDefs"
pip layer: "PipLayer"
pip u dash one: "PIPU-1"
pip u dash: "PIPU-"
pip utility: "Pip Utility"
pipe six hundred: "|600"
pipe six: "PIPE"
pipe for each: " | ForEach { "
pipe format dash: " | Format-"
pipe get dash: " | Get-"
pipe measure dash: " | Measure-"
pipe out dash: " | Out-"
pipe sort dash: " | Sort-"
pipe to clipboard: " | Set-Clipboard"
pipe where dash: " | Where-"
pipe where object: " | Where-Object { $_."
pit street: "Pitt St"
place mark: "placemark"
plan bravo: "Plan B"
plug dash in: "plug-in"
plug in five: "plugin"
plug in: "plugin"
plural sight: "Pluralsight"
plus plus plus: "+++"
plus plus: "++"
plus slash minus: "+/-"
pocket pc: "Pocket PC"
pod cast: "podcast"
pod casts: "podcasts"
point zero zero : ".00"
point zero one : ".01"
point zero two : ".02"
point zero three : ".03"
point zero four : ".04"
point zero five : ".05"
point zero six : ".06"
point zero seven : ".07"
point zero eight: ".08"
point zero nine : ".09"
point one zero : ".10"
point one one : ".11"
point one two : ".12"
point one three : ".13"
point one four : ".14"
point one five : ".15"
point one six : ".16"
point one seven : ".17"
point one eight : ".18"
point one nine : ".19"
point two zero : ".20"
point two one : ".21"
point two two : ".22"
point two three : ".23"
point two four : ".24"
point two five : ".25"
point two five: ".25"
point two six : ".26"
point two seven : ".27"
point two eight : ".28"
point two nine : ".29"
point three zero : ".30"
point three one : ".31"
point three two : ".32"
point three three : ".33"
point three four : ".34"
point three five : ".35"
point three six : ".36"
point three seven : ".37"
point three eight : ".38"
point three nine : ".39"
point three: ".3"
point four zero : ".40"
point four one : ".41"
point four two : ".42"
point four three : ".43"
point four four : ".44"
point four five : ".45"
point four six : ".46"
point four seven : ".47"
point four eight : ".48"
point four nine : ".49"
point four: ".4"
point five zero : ".50"
point five one : ".51"
point five two : ".52"
point five three : ".53"
point five four : ".54"
point five five : ".55"
point five six : ".56"
point five seven : ".57"
point five eight : ".58"
point five nine : ".59"
point six zero : ".60"
point six two : ".62"
point six four : ".64"
point six five : ".65"
point six six : ".66"
point six seven : ".67"
point six eight : ".68"
point six nine : ".69"
point seven zero : ".70"
point seven one : ".71"
point seven two : ".72"
point seven three : ".73"
point seven four: ".74"
point seven five : ".75"
point seven six : ".76"
point seven seven : ".77"
point seven eight : ".78"
point seven nine : ".79"
point eight zero : ".80"
point eight one : ".81"
point eight two : ".82"
point eight three : ".83"
point eight four : ".84"
point eight five : ".85"
point eight six : ".86"
point eight seven : ".87"
point eight eight : ".88"
point eight nine : ".89"
point nine zero : ".90"
point nine one : ".91"
point nine two : ".92"
point nine three : ".93"
point nine four : ".94"
point nine five : ".95"
point nine seven : ".97"
point nine eight : ".98"
point nine nine : ".99"
point f: "PointF"
point in polygon: "Point in Polygon"
point in: "PointIn"
poison s: "Poisson"
poly cam: "Polycam"
poly id: "PolyId"
post back: "postback"
post dash: "post-"
post gres: "Postgres"
post man: "Postman"
postal under delivery type: "POSTAL_DELIVERY_TYPE"
postcode boundaries: "Postcode Boundaries"
pow less than: " -lt "
pow not: " -not"
power of three: "^3"
power shell admin: user.rz_insert_key_sequence("Powershell{{heardword:"[M. Right]"}}")
power user one: "PowerUser"
pre dash: "pre-"
precisely one: "Precisely"
presto d b : "PrestoDB"
primary under address six: "PRIMARY_ADDRESS"
primary under secondary six: "PRIMARY_SECONDARY"
print f: "printf(""
printf: "printf("
private function: "Private Function "
private link: "PrivateLink"
private set: "Private Set"
pro one: "Pro"
pro leah: "Prolia"
prod one colon: "PROD1:"
prod one: "PROD1"
prod two: "PROD2"
program files sim spec: "c:\\program files\\SimSpect"
progress bar seven: "progressBar"
project one: "Project1"
promise left: "Promise<"
property under cad six: "PROPERTY_CAD"
prospect marketing: "Prospect Marketing"
public sub: "Public Sub "
pure energy: "PureEnergy"
push under back: "push_back"
pushover one: "Pushover"
put six: "PUT"
put under: "put_"
python three: "python3"
python s: "python "
q one w : "Q1W"
q two w : "Q2W"
q two: "Q2"
q three w zero: "Q3W0"
q three: "Q3"
q four: "Q4"
q a n d a: "qanda"
q a s under: "QAS_"
q a s: "qas"
q as: " AS "
q b c c : "QBCC"
q cat: "QCAT"
q count star: "COUNT(*)"
q end if: "End If"
q format count star: "FORMAT(COUNT(*), 0)"
q g i s six: "QGIS"
q gis six : "QGIS"
q group by: "GROUP BY "
q having: "HAVING "
q is null: " IS NULL"
q l d six: "QLD"
q l d comma: "QLD,"
q l d under: "QLD_"
q l d: "qld"
q like percent: user.rz_insert_key_sequence("LIKE '%%' {{left}}{{left}}")
q like quotes: user.rz_insert_key_sequence(" LIKE ''{{left}}")
q not null: " NOT NULL"
q on: user.rz_insert_key_sequence("ON{{space}}")
q order by: "ORDER BY"
q select: "SELECT "
q set: "SET "
q stars: "QStarz"
q t y: "qty"
q u e: "Que"
q u i p: "Quip"
q under: "q_"
q use: user.rz_insert_key_sequence("USE{{space}}")
q where: "WHERE "
q with roll up: "WITH ROLLUP"
quebec one: "Q1"
quebec three: "Q3"
quebec four: "Q4"
question dot l: user.rz_insert_key_sequence("?.{{Z1L}}")
question dot: "?."
question left right bracket s: user.rz_insert_key_sequence("?[]{{space}}")
question mark enter: user.rz_insert_key_sequence("?{{enter}}")
question mark mark: "??"
question mark question: "??"
question mark s l: user.rz_insert_key_sequence("? {{Z1L}}")
question s l: user.rz_insert_key_sequence("? {{Z1L}}")
question space: "? "
quick action: user.rz_insert_key_sequence("{{ctrl-.}}")
quick copy: "Kwik Kopy"
quick sight q: "QuickSight Q"
quick sight: "QuickSight"
quote one quote: "1"
quote back n: "\\n"
quote back zero: "'\\0'"
quote left bracket: ""["
quote paste quote: user.rz_insert_key_sequence("{{ctrl-v}}")
quote quote left: user.rz_insert_key_sequence("""{{left}}")
quote quote semi: """;"
quote quote: """"
quote right bracket: ""]"
quote right semi: "");"
quote space right bracket: "" ]"
r a five: "ra"
r a six: "RA"
r a c: "rac"
r a n d: "rand"
r a p six: "RAP"
r a p: "rap"
r a z: "raz"
r and d : "R&D"
r and r: "R&R"
r b a c : "RBAC"
r b b p six: "RBBP"
r b s six: "RBS"
r c s: "rcs"
r c u six: "RCU"
r conn: "rconn"
r d a r: "rdar"
r d d six: "RDD"
r d f six: "RDF"
r d p six: "RDP"
r d p: "rdp"
r d r: "rdr"
r d s six: "RDS"
r d s: "rds"
r e c: "rec"
r e d i s: "Redis"
r e f point: "refPoint"
r e f: "ref"
r e g e x: "regex"
r e l u : "ReLU"
r e l: "rel"
r e m: "rem"
r e p o: "repo"
r e p: "rep"
r e s dot: "res."
r e s i: "resi"
r e s p: "resp"
r e s: "res"
r e t: "ret"
r f i six: "RFI"
r f i d : "RFID"
r f i: "rfi"
r f s six: "RFS"
r g b: "RGB"
r g n six: "RGN"
r h s six: "RHS"
r i a a six: "RIAA"
r i ann: "Riaan"
r i l: "ril"
r i m: "rim"
r j z dash: "rjz-"
r j z: "rjz"
r m a : "RMA"
r m c six: "RMC"
r m s six: "RMS"
r m space: "rm "
r n d: "rnd"
r n enz : "RNNs"
r n n six: "RNN"
r net: "AARnet"
r o i : "ROI"
r o k: "rok"
r o l y: "roly"
r o n e n: "Ronen"
r o n i: "Roni"
r o n q forty four: "ronq44"
r o n q forty five: "ronq45"
r o n q: "ronq"
r o n z u l: "ronzul"
r o s six: "ROS"
r p c s: user.rz_insert_key_sequence("rpc{{space}}")
r p data: "RP Data"
r p o six: "RPO"
r r eyes: "RRIs"
r r i six: "RRI"
r r i i d : "RRI_ID"
r s six: "RS"
r s discussions: "RS disc"
r s review: "[RS Review]"
r s t: "rst"
r s v p: "rsvp"
r slash i : "R/I"
r t a: "RTA"
r t c six: "RTC"
r t l six: "RTL"
r t l: "rtl"
r t s six: "RTS"
r to m: "R to M"
r to w: "R to W"
r x three: "Rx"
r x five: "rx"
r z two six: "RZ2"
r z six: "RZ"
r z colon: "RZ:"
r z dash: "rz-"
r z slash alex: "RZ/Alex"
r z slash i l r : "RZ/ILR"
r z slash m z : "RZ/MZ"
r z slash y a : "RZ/YA"
r z slash: "RZ/"
r z solo: "RZ Solo"
r z under: "rz_"
rab s l: user.rz_insert_key_sequence("> {{Z1L}}")
rad zen: "Radzen"
radio button seven: "radioButton"
ram cam six: "RAMCAM"
ram cam: "ramcam"
range hood: "rangehood"
raw m d u : "Raw MDU"
razor one: "Razor"
razor o: "Razor"
re cell: "recell"
re colon posts: "re:posts"
read dash: "Read-"
read me: "readme"
ready nas: "ReadyNAS"
real dash: "real-"
real sense: "RealSense"
real v n c : "RealVNC"
recognition k: "Rekognition"
record set: "recordset"
rectangle f: "RectangleF"
red shift: "Redshift"
ref five s: "ref "
reg big: "REGBIG"
reg bock six: "REGBOC"
reg bock: "regboc"
reg c r s: "REGCRS"
reg edit: "regedit"
reg s v r thirty two: "regsvr32 "
reg size: "REGSIZ"
regards ronny: "Regards"
relationship under confidence: "RELATIONSHIP_CONFIDENCE"
release under id: "RELEASE_ID"
reliability under code: "RELIABILITY_CODE"
rem note: "RemNote"
remote pc: "RemotePC"
remove dash: "Remove-"
rep item: "RepItem"
replace all and copy: user.rz_insert_key_sequence("{{ctrl-a}}{{ctrl-v}}{{ctrl-a}}{{ctrl-c}}")
replace line enter: user.rz_insert_key_sequence("{{end}}{{shift-home}}{{del}}{{ctrl-v}}{{enter}}")
res net: "ResNet"
rest six full: "RESTful"
rest six: "REST"
restart dash: "restart-"
result two: "Result2"
result dot: "result."
retryable conn seven: "retryableConn"
return value: "RetVal"
rex ray: "REX-Ray"
rich text box seven: "richTextBox"
right angle bracket s: "> "
right angle s l: user.rz_insert_key_sequence("> {{Z1L}}")
right bang left: "]!["
right brace brace: "{r-brace}{r-brace}"
right brace enter: user.rz_insert_key_sequence("{{r-brace}}{{enter}}")
right brace semi: "{r-brace};"
right bracket bracket: "]]"
right bracket quote: "]""
right click: "right click"
right k k: "]]"
right new block: user.rz_insert_key_sequence("){{enter}}{{heardword:"[C. New Block]"}}")
right p comma: "),"
right p enter: user.rz_insert_key_sequence("){{enter}}")
right p s: user.rz_insert_key_sequence("){{space}}")
right p semi: ");"
right paren brace: ") { "
right sizing: "rightsizing"
road six: "ROAD"
road dash six: user.rz_insert_key_sequence("ROAD-")
road map: "roadmap"
road type code six: "ROAD_TYPE_CODE"
road under pid six: "ROAD_PID"
roads under hierarchy six: "ROADS_HIERARCHY"
roads under locality line: "ROADS_LOCALITY_LINE"
rob m: "robm"
rob mar: "robmar"
rom five: "rom"
ron zulu: "ronzulu"
ronen apostrophe s: "Ronen's"
ronen slash isaac: "Ronen/Isaac"
ronny b: "ronnyb"
ronny dot zulaikha: "ronny.zulaikha"
ronny slash brian: "Ronny/Brian"
ronny slash isaac: "// RZ/ILR: "
ronny z: "ronnyz"
ronnys agent: "RonnysAgent"
ronzul tab belly: user.rz_insert_key_sequence("ronzul{{tab}}bellyB$45{{enter}}")
route fifty three: "Route 53"
run zero under: "Run0_"
run zero: "Run0"
run one under: "Run1_"
run one: "Run1"
run two under: "Run2_"
run two: "Run2"
run three: "Run3"
run four: "Run4"
run five: "Run5"
run no space: "Run"
run test: user.rz_insert_key_sequence("{{Ctrl+r}}t")
s  card verify: "SCardVerify"
s  s  spew e: "ssscpuwe"
s  t  r: "str"
s three d: "S3d"
s three glacier: "S3 Glacier"
s three one zone: "S3 One Zone"
s three standard: "S3 Standard"
s three t a : "S3TA"
s three: "S3"
s a one five: "sa1"
s a one: "SA1"
s a two five: "sa2"
s a two six: "SA2"
s a three five: "sa3"
s a four five: "sa4"
s a five: "sa"
s a six: "SA"
s a a s: "SaaS"
s a comma: "SA,"
s a m e a c h: "sameach"
s a m l : "SAML"
s a m l six: "SAML"
s a n six: "SAN"
s a n u s: "Sanus"
s a r six: "SAR"
s a r i f: "sarif"
s a r u s h: "Sarush"
s a under: "SA_"
s a v t a: "Savta"
s a x: "sax"
s as: " AS "
s asterisk l: user.rz_insert_key_sequence(" *{{Z1L}}")
s at sign: user.rz_insert_key_sequence("{{space}}@")
s b five: "sb"
s b dot: "sb."
s b s six: "SBS"
s back quote: user.rz_insert_key_sequence("{{space}}`")
s brace brace: user.rz_insert_key_sequence("{{Space}}{{{{}}{{{{}}")
s brace enter: user.rz_insert_key_sequence("{{space}}{{l-brace}}{{}}{{enter}}")
s c one five: "sc1"
s c five: "sc"
s c six: "SC"
s c a: "sca"
s c base: "scbase"
s c h e d: "sched"
s c m six: "SCM"
s c o s: "scos"
s c p six: "SCP"
s c t six: "SCT"
s c t: "sct"
s card a p i: "SCardApi"
s card: "SCard"
s d five: "sd"
s d card: "SD Card"
s d e six: "SDE"
s d e dash: "SDE-"
s d i six: "SDI"
s d k: "SDK"
s d n six: "SDN"
s d u : "SDU"
s d u six: "SDU"
s d use: "SDUs"
s dash five: user.rz_insert_key_sequence("{{Space}}-{{Z5}}")
s dash cap delta: user.rz_insert_key_sequence("{{space}}-D")
s dash dash l: user.rz_insert_key_sequence("{{Space}}--{{Z1L}}")
s dash dash max count: user.rz_insert_key_sequence("{{space}}--max-count=")
s dash dash one line: user.rz_insert_key_sequence("{{space}}--oneline")
s dash l: user.rz_insert_key_sequence("{{Space}}-{{Z1L}}")
s dash message: " -Message"
s dash p s : " -PS"
s dash pro: "S-Pro"
s dash verb: " -Verb"
s dash victor: user.rz_insert_key_sequence("{{space}}-v")
s dash: " -"
s declare: "DECLARE "
s dollar l: user.rz_insert_key_sequence(" ${{Z1L}}")
s dot net: " dotnet"
s dot v i c : "S.VIC"
s dot: "S."
s e five: "se"
s e c: "sec"
s e d e r: "Seder"
s e d space: "sed "
s e e e d: "seeed"
s e i d six: "SEID"
s e l: "sel"
s e p  twenty two: "SEP22"
s e p twenty three: "SEP23"
s e p three: "Sep"
s e p: "sep"
s e q: "seq"
s e s six: "SES"
s f five: "sf"
s f six: "SF"
s f activity: "SF Activity"
s f c: "sfc"
s f i six: "SFI"
s f state: "SF State"
s f t p six: "SFTP"
s f t p: "sftp"
s f task: "SF Task"
s f under six: "SF_"
s f worker: "SF Worker"
s from: "FROM "
s g dot: "sg."
s g s six: "SGS"
s g s economics: "SGS Economics"
s h three: "sh3"
s h a h a r: "Shahar"
s h p: "shp"
s h space: "sh "
s h u l a: "Shula"
s h u l: "Shul"
s i five: "si"
s i m six: "SIM"
s i n: "sin"
s is null: " IS NULL"
s j m six: "SJM"
s l a six: "SLA"
s l a a: "slaa"
s l r six: "SLR"
s l t six: "SLT"
s l: user.rz_insert_key_sequence(" {{Z1L}}")
s left brace s: " { "
s left brace: " {"
s left right p left: user.rz_insert_key_sequence("{{space}}(){{left}}")
s lock u s b: "ssslkusb"
s m b : "SMB"
s m c lib: "smclib"
s m dash two: "SM-2"
s m m global: user.rz_insert_key_sequence("{{space}}--global")
s m s six: "SMS"
s m t p six: "SMTP"
s m t p: "smtp"
s n e h a l: "Snehal"
s n g: "sng"
s n s six: "SNS"
s n s: "sns"
s o a six: "SOA"
s o c three: "SoC"
s o f six: "SOF"
s o h o six: "SOHO"
s o n o s: "sonos"
s o w six: "SOW"
s ok: "S_OK"
s p five: "sp"
s p six: "SP"
s p eight three five three six: "SP8535"
s p eight five three five: "sp8535"
s p a six: "SPA"
s p a h r: "Spahr"
s p c: "spc"
s p e c: "spec"
s p o f: "spof"
s p type: "SP Type"
s p under p: " p_p"
s p: " p"
s q k m: "sqkm"
s q l five: "sql"
s q l six: "SQL"
s q l geography: "SqlGeography"
s q l geometry: "SqlGeometry"
s q l server one: "SqlServer"
s q l: "sql"
s q light under: "sqlite3_"
s q light w five: "sqlitew"
s q light: "SQLite"
s q m: "sqm"
s q r t: "sqrt"
s q r: "sqr"
s q s : "SQS"
s q s six: "SQS"
s question question: user.rz_insert_key_sequence("{{space}}??")
s r five: "sr"
s r six: "SR"
s r c: "src"
s r dash: "sr-"
s r i d six: "SRID"
s r i d: "srid"
s r n : "SRN"
s r n six: "SRN"
s r s algorithm: "SrsAlgorithm"
s r s: "srs"
s r settings: "SRSettings"
s r t six: "SRT"
s r t m : "SRTM"
s r t: "srt"
s r v r: "srvr"
s right brace: " {r-brace}"
s s a six: "SSA"
s s d one six: "SSD1"
s s d six: "SSD"
s s e : "SSE"
s s filter: "sssscflt"
s s h six: "SSH"
s s h net: "SshNet"
s s i s six: "SSIS"
s s l six: "SSL"
s s m six: "SSM"
s s m s : "SSMS"
s s o six: "SSO"
s s s six: "SSS"
s s s a: "sssa"
s s s c p s v: "ssscpsv"
s s s: "sss"
s scan f: "sscanf("
s single quote: " '"
s slash rab: " />"
s slash right: " />"
s star m under p: " *m_p"
s star p under p: " *p_p"
s star p: " *p"
s star s: " * "
s t a t s: "stats"
s t a t: "stat"
s t d five: "std"
s t d six: "STD"
s t d call: "stdcall"
s t d colon: user.rz_insert_key_sequence("std::{{Z1L}}")
s t d i o: "stdio"
s t d string: "std::string"
s t d: "std"
s t g six: "STG"
s t l six: "STL"
s t p: "stp"
s t r c m p: "strcmp("
s t r cat: "strcat("
s t r len: "strlen("
s t r n c m p: "strncmp("
s t r: "str"
s t s six: "STS"
s t under six: "ST_"
s t under: "st_"
s t x six: "STX"
s u b l: "subl"
s u m r a: "Sumra"
s u m: "sum"
s u p six: "SUP"
s u p under: "sup_"
s u p: "sup"
s v c: "svc"
s v d six: "SVD"
s v h six: "SVH"
s v n six: "SVN"
s v n: "svn"
s v r: "svr"
s vertical bar: user.rz_insert_key_sequence("{{space}}|")
s w two: "SW2"
s w five: "sw"
s w back: "sw\\\\"
s w f six: "SWF"
s w l: "swl"
s y g i c: "sygic"
s y n c: "sync"
s y s: "sys"
s21: "S21"
sdash dash delete: user.rz_insert_key_sequence("{{space}}--delete{{space}}")
sdash t r five: " -tr"
sacks institute: "Sax Institute"
safe array: "SAFEARRAY"
sam six: "SAM"
sam ten: "Samten"
samba: "Samba"
same era: "Sameera"
san disk: "SanDisk"
saturn under c: "SATURN_C"
scale a: "Scala"
schema dot table seven: "schemaDotTable"
sci ends: "Sciens"
scratch one: user.rz_insert_key_sequence("")
scratch two: user.rz_insert_key_sequence("")
scratch three: user.rz_insert_key_sequence("")
scratch four: user.rz_insert_key_sequence("")
scratch five: user.rz_insert_key_sequence("")
scratch that: user.rz_insert_key_sequence("")
screen shot: "screenshot"
screen shots: "screenshots"
scroll bar three: "ScrollBar"
sea born: "Seaborn"
search commercial: "Search Commercial"
second s: "second"
secondary under address six: "SECONDARY_ADDRESS"
secondary under complex name: "SECONDARY_COMPLEX_NAME"
see far six: "SEIFA"
see far: "seifa"
see ya six: "SEIYA"
seg bot: "Segbot"
seggy dash zero: "SEG-0"
segway chat: "SegwayChat"
select star from: "SELECT * FROM "
self dash: "self-"
semi app do dash one: "; APDU-1"
semi app do dash two: "; APDU-2"
semi b b discussions: "; BB disc"
semi confluence: "; Confluence"
semi dash: "semi-"
semi e c g dash: "; ECG-"
semi emails: "; Emails"
semi g los: "; GLOS"
semi geoc support: "; Geoc support"
semi geok dash one: "; GEOC-1"
semi geok dash three: "; GEOC-3"
semi gista dash: "; GISTA-"
semi i r discussions: "; IR disc"
semi jeera six: "; JIRA"
semi lib dash: "; LIB-"
semi pip u dash: "; PIPU-"
semi pip u dash one: "; PIPU-1"
semi r s discussions: "; RS disc"
semi s: "; "
semi sup dash one: "; SUP-1"
semi sup dash ten: "; SUP-10"
semi sup dash eleven: "; SUP-11"
semi sup dash twelve: "; SUP-12"
semi sup dash thirteen: "; SUP-13"
semi sup dash two: "; SUP-2"
semi sup dash three: "; SUP-3"
semi sup dash five: "; SUP-5"
semi sup dash six: "; SUP-6"
semi sup dash seven: "; SUP-7"
semi sup dash eight: "; SUP-8"
semi sup dash nine: "; SUP-9"
semi sup dash: "; SUP-"
semi u p a dash two: "; UPA-2"
semi u p a dash four: "; UPA-4"
semi u p a dash six: "; UPA-6"
semi u p a dash seven: "; UPA-7"
semi u p a support: "; UPA support"
semi various: "; Various"
semi whack dash one: "; WAQ-1"
semi whack dash two: "; WAQ-2"
semi whack dash three: "; WAQ-3"
semi whack dash four: "; WAQ-4"
semi whack dash five: "; WAQ-5"
semi whack dash six: "; WAQ-6"
semi whack support: "; WAQ support"
sensitive attachment removed: user.rz_insert_key_sequence("{{l-brace}}{{}}Sensitive attachment removed{{r-brace}}")
sep three: "Sep"
september twenty twenty two: "September 2022"
sequel server: "SQL Server"
serve enter: user.rz_insert_key_sequence("{{space}}serve{{enter}}")
service class three: "Service Class"
service lens: "ServiceLens"
set dash: "Set-"
set next statement: user.rz_insert_key_sequence("{{ctrl-shift-f10}}")
shalom nahag: "hello driver"
shape file one: "Shapefile"
shift d ten: user.rz_insert_key_sequence("{{shift-down}}{{shift-down}}{{shift-down}}{{shift-down}}{{shift-down}}{{shift-down}}{{shift-down}}{{shift-down}}{{shift-down}}{{shift-down}}")
shift house key k k: user.rz_insert_key_sequence("{{shift-home}}[[")
shift house key slow k k: user.rz_insert_key_sequence("{{Shift+Home}}{{wait:200}}{{Shift+Home}}[[")
shift m up: user.rz_insert_key_sequence("{{f4}}")
shill off: "Chilov"
shop a docket: "Shop-A-Docket"
shop mate: "ShopMate"
show def: user.rz_insert_key_sequence("{{f12}}")
show refs: user.rz_insert_key_sequence("{{shift-f12}}")
shul cloud: "ShulCloud"
shutdown dash s: "shutdown -s"
sierra four: "S4"
sierra colon back: "S:\\"
sierra colon: "s:"
sierra dot dash: "S. Dash"
sig win: "cygwin"
sigh kit learn: "scikit-learn"
signal r: "SignalR"
signer one: "Signer"
sim card: "SimCard"
single quote l: user.rz_insert_key_sequence("'{{Z1L}}")
single quote paste quote: user.rz_insert_key_sequence("'{{ctrl-v}}'")
single quote quote braces: user.rz_insert_key_sequence("'{{}}'{{left}}{{left}}")
single quote quote left: user.rz_insert_key_sequence("''{{left}}")
single quote quote: "''"
single quote s quote: user.rz_insert_key_sequence("'{{space}}'")
single quote y quote: "'Y'"
sis tane: "Systane"
size under t: "size_t"
size under type: "size_type"
sketch  up: "SketchUp"
slash zero one twenty twenty four: "/01/2024"
slash zero one: "/01"
slash zero two twenty twenty four: "/02/2024"
slash zero two: "/02"
slash zero three twenty twenty four: "/03/2024"
slash zero three: "/03"
slash zero four twenty twenty four: "/04/2024"
slash zero four: "/04"
slash zero five twenty twenty three: "/05/2023"
slash zero five: "/05"
slash zero six twenty twenty four: "/06/2024"
slash zero six: "/06"
slash zero seven twenty twenty four: "/07/2024"
slash zero seven: "/07"
slash zero eight twenty twenty four: "/08/2024"
slash zero eight: "/08"
slash zero nine twenty twenty four: "/09/2024"
slash zero nine: "/09"
slash one twenty fifteen: "/1/2015"
slash one twenty sixteen: "/1/2016"
slash one twenty twenty four: "/1/2024"
slash one: "/1"
slash ten twenty eighteen: "/10/2018"
slash ten twenty twenty three: "/10/2023"
slash one hundred: "/100"
slash eleven twenty twenty four: "/11/2024"
slash eleven: "/11"
slash twelve twenty twenty three: "/12/2023"
slash twelve slash twenty sixteen: "/12/2016"
slash twelve: "/12"
slash nineteen sixty six: "/1966"
slash nineteen: "/19"
slash two twenty twenty two: "/2/2022"
slash two: "/2"
slash twenty thirteen: "/2013"
slash twenty fourteen: "/2014"
slash twenty fifteen: "/2015"
slash twenty sixteen: "/2016"
slash twenty seventeen: "/2017"
slash twenty eighteen: "/2018"
slash twenty nineteen: "/2019"
slash twenty twenty: "/2020"
slash twenty twenty one: "/2021"
slash twenty twenty two: "/2022"
slash twenty twenty three: "/2023"
slash twenty twenty four: "/2024"
slash twenty twenty six: "/2026"
slash twenty [hundred] fourteen: "/2014"
slash twenty [hundred] fifteen: "/2015"
slash twenty three: "/23"
slash twenty seven: "/27"
slash three twenty twenty two: "/3/2022"
slash three: "/3"
slash four twenty fifteen: "/4/2015"
slash four twenty sixteen: "/4/2016"
slash four: "/4"
slash five twenty sixteen: "/5/2016"
slash five twenty twenty: "/5/2020"
slash five: "/5"
slash six twenty sixteen: "/6/2016"
slash six twenty eighteen: "/6/2018"
slash six twenty twenty: "/6/2020"
slash six: "/6"
slash seven twenty seventeen: "/7/2017"
slash seven twenty twenty four: "/7/2024"
slash seven: "/7"
slash eight twenty twenty one: "/8/2021"
slash eight: "/8"
slash nine twenty seventeen: "/9/2017"
slash nine twenty twenty one: "/9/2021"
slash nine: "/9"
slash ancient: "/ancient"
slash b b : "BB"
slash child: user.rz_insert_key_sequence("/{{wait:250}}child")
slash code enter: user.rz_insert_key_sequence("/{{wait:250}}code{{enter}}")
slash divider: user.rz_insert_key_sequence("/{{wait:200}}divider{{enter}}")
slash exports: "/exports "
slash info excerpt: "/info"
slash info: user.rz_insert_key_sequence("/{{wait:200}}info{{enter}}")
slash jeera: user.rz_insert_key_sequence("/{{wait:300}}JIRA{{enter}}")
slash l: user.rz_insert_key_sequence("/{{Z1L}}")
slash link enter: user.rz_insert_key_sequence("/link{{enter}}")
slash n ten [hundred]: "/n1000 "
slash quote: user.rz_insert_key_sequence("/{{wait:300}}quote{{enter}}")
slash r z : "/RZ"
slash right angle bracket: "/>"
slash romeo space: "/r "
slash slash : "//"
slash star: "/* "
slash this month: "/06/05"
smiley face: ":-)"
smote six: "SMOTE"
soar six: "SOAR"
soft max: "softmax"
soft phone: "softphone"
software a q pro: "D:\\sw\\callpoint\\AQ Pro\\trunk"
software amatek: "d:\\sw\\amatek\\"
software aq pro: "d:\\sw\\callpoint\\aq pro"
software callpoint: "D:\\sw\\Callpoint"
software codet: "D:\\sw\\Amatek\\Codet_trunk\\F070 software\\"
software d n lib: "D:\\sw\\callpoint\\dnlib\\trunk"
software digital elevation: "c:\\sw\\callpoint\\DigitalElevation"
software hear here m p three: "C:\\sw\\HearHere\\Experiments\\mp3"
software hear here: "c:\\sw\\hearhere"
software logs: "c:\\sw\\logs"
software m m o config: "D:\\sw\\callpoint\\upa\\MmoConfig\\trunk"
software m m o: "D:\\sw\\Callpoint\\Upa\\Mmo\\trunk"
software pipu: "E:\\sw\\Callpoint_svn\\Util\\PipUtil\\trunk"
software shortest path: "C:\\sw\\CallPoint\\ShortestPath"
software street intersections: "C:\\sw\\CallPoint\\StreetIntersections\\"
software u p a releases: "D:\\sw\\Callpoint\\Upa\\Upa\\releases"
software u p a: "D:\\sw\\Callpoint\\Upa\\trunk"
sol jen: "Solgen"
solar p v : "Solar PV"
solar under address six: "SOLAR_ADDRESS"
solar under panel: "SOLAR_PANEL"
sound bar: "soundbar"
sound x: "Soundex"
source dash: "source-"
source safe: "SourceSafe"
space ampersand: " & "
space back: " \\"
space bar l: user.rz_insert_key_sequence(" {{Z1L}}")
space d: "spaced"
space dollar sign: " $"
space l: user.rz_insert_key_sequence(" {{Z1L}}")
space right bracket: " ]"
space slash right angle: user.rz_insert_key_sequence("{{space}}/>")
space slash right: " />"
space space: "  "
space vertical bar: " |"
spacy five: "spacy"
spacy: "spaCy"
spark three: "Spark"
spatial lite: "SpatiaLite"
speed enter: user.rz_insert_key_sequence("speed{{enter}}")
spirit grow: "Spiritgrow"
split container seven: "splitContainer"
spot if i: "Spotify"
stack sets: "StackSets"
staging under: "staging_"
star const: " *const "
star dot t x t space: "*.txt "
star draft star: "**draft**"
star m under p: "*m_p"
star p under p: "*p_p"
star p under: "*p_"
star s p u p: "* p_p"
star slash: " */"
star space: "* "
star star left: user.rz_insert_key_sequence("**{{left}}")
star star: "**"
start dash: "Start-"
start financial year: "1/7/2007"
state under p i d : "STATE_PID"
stats calculator: "statsCalculator"
status success: "STATUS_SUCCESS"
stop dash: "Stop-"
stop watch: "stopwatch"
strata under type: "STRATA_TYPE"
street combo name: "StreetComboName"
street frontage: "Street Frontage"
street info one: "StreetInfo"
street under line six: "STREET_LINE"
street under line pid: "STREET_LINE_PID"
street under line: "STREET_LINE"
street under locality line: "STREET_LOCALITY_LINE"
street under locality p i d : "STREET_LOCALITY_PID"
street under locality: "STREET_LOCALITY"
string five less: user.rz_insert_key_sequence("string {{Z1L}}")
string five s: "string "
string five t: user.rz_insert_key_sequence("string{{tab}}")
string five: "string"
string ampersand: "string&"
string builder: "StringBuilder"
string s t r: "string str"
strings dot: "strings."
sub address: "subaddress"
sub addresses: "subaddresses"
sub deck: "subdeck"
sub fields: "subfields"
sub folder: "subfolder"
sub item: "SubItem"
sub keys: "subkeys"
sub m g r: "SubMgr"
sub name: "subname"
sub string: "Substring"
sub tasks: "sub-tasks"
sub type: "subtype"
sub unit one: "SubUnit"
sub version: "Subversion"
subject colon paste that: user.rz_insert_key_sequence("Subject:{{space}}{{ctrl-v}}")
succeeded six: "SUCCEEDED("
succeeded result: "SUCCEEDED(Result)"
sun dog: "Sundog"
sup dash one: "SUP-1"
sup dash ten sixty six: "SUP-1066"
sup dash ten: "SUP-10"
sup dash twelve: "SUP-12"
sup dash thirteen: "SUP-13"
sup dash fourteen: "SUP-14"
sup dash fifteen: "SUP-15"
sup dash sixteen: "SUP-16"
sup dash seventeen: "SUP-17"
sup dash eighteen: "SUP-18"
sup dash nineteen: "SUP-19"
sup dash two: "SUP-2"
sup dash twenty: "SUP-20"
sup dash twenty one: "SUP-21"
sup dash twenty two: "SUP-22"
sup dash twenty three: "SUP-23"
sup dash twenty four: "SUP-24"
sup dash twenty five: "SUP-25"
sup dash three: "SUP-3"
sup dash four: "SUP-4"
sup dash seven: "SUP-7"
sup dash eight: "SUP-8"
sup dash: "SUP-"
sup under admin: "SUP_ADMIN"
sup under data: "SUP_DATA"
sup under geok: "SUP_GEOC"
sup under software: "SUP_SOFTWARE"
sup under whack: "SUP_WAQ"
super loop: "Superloop"
support one: "Support"
surf shark: "Surfshark"
surface cover: "Surface Cover"
surround with try: user.rz_insert_key_sequence("{{ctrl-k}}stry{{tab}}")
surround with: user.rz_insert_key_sequence("{{ctrl-k}}s")
surry hills: "Surry Hills"
swift x: "Swyftx"
swimming under pool six: "SWIMMING_POOL"
switch x comma y: user.rz_insert_key_sequence("{{Shift+ExtEnd}}{{Ctrl+x}}{{BackSpace}}{{ExtHome}}{{wait:100}}{{Ctrl+v}},{{Space}}{{End}}")
sys dash: "SYS-"
system dot: "System."
system net: "Systemnet"
t  zero: "T0"
t twenty four: "T24"
t three equals: user.rz_insert_key_sequence("{{space}}==={{space}}")
t a b: "tab"
t a n a: "Tana"
t a p o: "Tapo"
t a s six: "TAS"
t a s colon s: "TAS: "
t a s comma: "TAS,"
t a s under: "TAS_"
t a u: "tau"
t a under: user.rz_insert_key_sequence("TA_")
t a v i six: "TAVI"
t ampersand t: "T&T"
t and t state: "T&T State"
t b d six: "TBD"
t b l: "tbl"
t body: "tbody"
t boolean: "boolean"
t c n: "tcn"
t c o : "TCO"
t c p five: "tcp"
t c p client: "TcpClient"
t c p dash: "TCP-"
t cache under: "tCache_"
t char: "TCHAR"
t d five: "td"
t d six: "TD"
t d dot l: user.rz_insert_key_sequence("td.{{Z1L}}")
t d under: "TD_"
t e c h: "tech"
t e m p: "temp"
t equals zero: "T=0"
t equals: user.rz_insert_key_sequence("{{space}}==={{space}}")
t export s: user.rz_insert_key_sequence("export{{space}}")
t extends s: user.rz_insert_key_sequence("{{space}}extends{{space}}")
t f six: "TF"
t f i d f : "TF-IDF"
t f keras dot: "tf.keras."
t f n six: "TFN"
t f t p : "TFTP"
t file: "TFile"
t for con less: user.rz_insert_key_sequence("for (const  in ) {{{{Z1L}}")
t function s: user.rz_insert_key_sequence("function{{space}}")
t get less: user.rz_insert_key_sequence("get {{Z1L}}")
t h c six: "THC"
t h c: "thc"
t h x: "thx"
t i five: "ti"
t i f: "tif"
t implements s: user.rz_insert_key_sequence("{{space}}implements{{space}}")
t implements: user.rz_insert_key_sequence("{{space}}implements{{space}}")
t interface s: user.rz_insert_key_sequence("interface{{space}}")
t l s one point zero: "TLS 1.0"
t l s one point one: "TLS 1.1"
t l s one point two: "TLS 1.2"
t l s six: "TLS"
t l s: "tls"
t l v : "tlv"
t l v six: "TLV"
t left quote: user.rz_insert_key_sequence("t(""){{left}}{{left}}")
t m j six: "TMJ"
t m n e: "Tmne"
t m p: "Tmp"
t m under: "tm_"
t n r d six: "TNRD"
t n t five: "tnt"
t n t six: "TNT"
t new block: user.rz_insert_key_sequence("{{space}}{{l-brace}}{{}}{{enter}}")
t node i d: "TNodeId"
t number: "number"
t o five: "to"
t o b y: "Toby"
t o c six: "TOC"
t o colon s: "To: "
t o colon: "To:"
t o d o: "todo"
t o f: "tof"
t o g g l: "toggl"
t o n six: "TON"
t o o: "too"
t o p o: "topo"
t o t p six: "TOTP"
t p d six: "TPD"
t p g : "TPG"
t p g one: "tpg1"
t p g six: "TPG"
t p g c six: "TPGC"
t p g c: "tpgc"
t p s c: "tpsc"
t p s: "tps"
t p t: "tpt"
t p u six: "TPU"
t pass: "TPass"
t r a n s: "trans"
t s five: "ts"
t s six: "TS"
t s c space: user.rz_insert_key_sequence("tsc{{space}}")
t s c: "tsc"
t s config: "tsconfig"
t s t: "tst"
t s v: "tsv"
t score: "T-Score"
t t i: "tti"
t t l six: "TTL"
t t n c f: "ttncf"
t t n dot: "TTN."
t t n: "ttn"
t t p six: "TTP"
t t s s six: "TTSS"
t triple equals: " === "
t u i: "tui"
t w o: "two"
t x three: "Tx"
t x five: "tx"
t x t: "txt"
tab  info: "TabInfo"
tab zero colon: user.rz_insert_key_sequence("{{tab}}0:")
tab one colon: user.rz_insert_key_sequence("{{tab}}1:")
tab ten colon: user.rz_insert_key_sequence("{{tab}}10:")
tab eleven colon: user.rz_insert_key_sequence("{{tab}}11:")
tab twelve colon: user.rz_insert_key_sequence("{{tab}}12:")
tab thirteen colon: user.rz_insert_key_sequence("{{tab}}13:")
tab fourteen colon: user.rz_insert_key_sequence("{{tab}}14:")
tab fifteen colon: user.rz_insert_key_sequence("{{tab}}15:")
tab sixteen colon: user.rz_insert_key_sequence("{{tab}}16:")
tab seventeen colon: user.rz_insert_key_sequence("{{tab}}17:")
tab eighteen colon: user.rz_insert_key_sequence("{{tab}}18:")
tab nineteen colon: user.rz_insert_key_sequence("{{tab}}19:")
tab two tab: "tab2tab"
tab twenty colon: user.rz_insert_key_sequence("{{tab}}20:")
tab twenty one colon: user.rz_insert_key_sequence("{{tab}}21:")
tab twenty two colon: user.rz_insert_key_sequence("{{tab}}22:")
tab twenty four colon: user.rz_insert_key_sequence("{{tab}}24:")
tab twenty five colon: user.rz_insert_key_sequence("{{tab}}25:")
tab six: "TAB"
tab seven colon: user.rz_insert_key_sequence("{{tab}}7:")
tab eight colon: user.rz_insert_key_sequence("{{tab}}8:")
tab nine colon: user.rz_insert_key_sequence("{{tab}}9:")
tab key two slow: user.rz_insert_key_sequence("{{Tab}}{{wait:200}}{{Tab}}")
tab key l: user.rz_insert_key_sequence("{{Tab}}{{Z1L}}")
tab key s: user.rz_insert_key_sequence("{{tab}}{{space}}")
tab lu: "Tableau"
tab minus ten: user.rz_insert_key_sequence("{{tab}}-10")
tab minus fifteen: user.rz_insert_key_sequence("{{tab}}-15")
tab minus twenty: user.rz_insert_key_sequence("{{tab}}-20")
tab minus twenty five: user.rz_insert_key_sequence("{{tab}}-25")
tab minus five: user.rz_insert_key_sequence("{{tab}}-5")
tab r z six: user.rz_insert_key_sequence("{{tab}}RZ")
table under: "Table_"
tag six: "TAG"
tag cache: "TagCache"
tag search commercial: "Tag: Search Commercial"
tail space: "tail "
tango under left: user.rz_insert_key_sequence("T_{{left}}")
task left: "Task<"
task manager admin: user.rz_insert_key_sequence("Task Manager{{heardword:"[M. Right]"}}")
team viewer: "TeamViewer"
teams one: "Teams"
tech type seven: "techType"
tell net: "telnet"
telly b: "tellyb"
template r: "Templater"
ten knee: "Tennie"
tensor flow: "TensorFlow"
test zero zero: "Test00"
test dash: "Test-"
test h r result: "TESTHR(Result)"
test i d: "TestId"
test under: "Test_"
tests slash unit: "tests/unit/"
text box one: "TextBox"
text box seven: "textBox"
text box: "TextBox"
text direction one: "TextDirection"
text racked: "Textract"
thanks ronny: "Thanks"
the ta: "theta"
the word hotmail: "bellyB@44HM"
third t: "third"
this dot l: user.rz_insert_key_sequence("this.{{Z1L}}")
this dot: "this."
tick tock: "TikTok"
tilde tilde: "~~"
time code: "timecode"
time codes: "timecodes"
time span: "TimeSpan"
time stamp: "timestamp"
time stream: "Timestream"
timtzotskoofim: "Go suck monkeys"
tinker pop: "TinkerPop"
to alpha: "to a"
to be: "to be"
to colon alex: "To: Alex"
to colon brian: "To: Brian"
to colon claire: "To: Claire"
to colon dad: "To: Dad"
to colon gahba: "To: Yael"
to colon ronny comma brian: "To: Ronny, Brian"
to colon ronny: "To: Ronny"
to do two: "to do"
to do six: "TODO"
to do colon: "TODO:"
to margaret comma brian: "To: Margaret, Brian"
to s a: "to a"
to s do: "to do"
to string: "ToString"
to the: "to the"
toble ronny: "Tobleroni"
today's date: "28/09/2020"
tom tom one: "TomTom"
tool bar: "toolbar"
tool strip seven: "toolStrip"
top ten: "TOP 10 "
topic path one: "TopicPath"
topic path list: "TopicPathList"
tortoise s v n : "TortoiseSVN"
track bar seven: "trackBar"
trans pile: "transpile"
trans topo: "TransTopo"
transport and topography: "Transport and Topography"
transport hierarchy code six: "TRANSPORT_HIERARCHY_CODE"
transport under hierarchy code: "TRANSPORT_HIERARCHY_CODE"
tree no: "Trino"
tribo electric: "triboelectric"
triple slash angle: user.rz_insert_key_sequence("/// <")
triple slash remarks: "/// <remarks>"
triple slash: user.rz_insert_key_sequence("/// ")
true five: "true"
trunk five: "trunk"
truth e: "truthy"
tuple string string: "TupleStringString"
type script: "TypeScript"
u  long: "ulong"
u two f : "U2F"
u a f six: "UAF"
u art: "UART"
u bun too: "ubuntu"
u c c six: "UCC"
u c l six: "UCL"
u c l: "ucl"
u d f six: "UDF"
u d f: "udf"
u d p six: "UDP"
u dem me: "Udemy"
u i five: "ui"
u i six: "UI"
u i a : "UIA"
u i c c five: "uicc"
u i c c six: "UICC"
u i n t sixty four: "UInt64"
u i n t: "UInt"
u in: "UINT"
u int five: "uint"
u m l : "UML"
u m l six: "UML"
u n h c r : "UNHCR"
u n r w a : "UNRWA"
u n r w a: "unrwa"
u n s w : "UNSW"
u p a one: "UPA1"
u p a six: "UPA"
u p a dash one: "UPA-1"
u p a dash three: "UPA-3"
u p a dash five: "UPA-5"
u p a dash seven: "UPA-7"
u p a dash nine: "UPA-9"
u p a dash: "UPA-"
u p a filename expander: "UpaFilenameExpander"
u p a g s one: "UpaGs"
u p a release: "UPA Release"
u p a status seven: "upaStatus"
u p a status: "UpaStatus"
u p a support: "UPA support"
u p a: "upa"
u p s six: "UPS"
u r five: "ur"
u r b: "urb"
u r elves: "URLs"
u r i: "uri"
u r l six: "URL"
u r l s: "urls"
u r l: "url"
u s five: "us"
u s b six: "USB"
u s b: "usb"
u s i d: "usid"
u s i m: "USIM"
u short five: "ushort"
u sim: "USIM"
u slash l six: "U/L"
u t c six: "UTC"
u t f: "utf"
u t i l s: "utils"
u t i l: "util"
u t l: "utl"
u u i d of: "__uuidof"
u w p: "uwp"
un initialize: "uninitialize"
un named: "unnamed"
under zero one: "_01"
under zero two: "_02"
under zero three: "_03"
under zero four: "_04"
under zero five: "_05"
under zero six: "_06"
under zero seven: "_07"
under zero eight: "_08"
under zero nine: "_09"
under ten: "_10"
under one hundred: "_100"
under eleven: "_11"
under twenty fifteen: "_2015"
under twenty twenty one: "_2021"
under a u t six: "_AUT"
under a u t h: "_AUTH"
under active: "_ACTIVE"
under address six: "_ADDRESS"
under b string: "_bstr_t"
under b u f: "_BUF"
under bravo two: "_b2"
under c a d six: "_CAD"
under c p five: "_cp"
under c p six: "_CP"
under c t e : "_CTE"
under cad six: "_CAD"
under change six: "_CHANGE"
under charlie papa: "_cp"
under class six: "_CLASS"
under class under code six: "_CLASS_CODE"
under code six: "_CODE"
under count six: "_COUNT"
under created six: "_CREATED"
under d z u: "_DzU"
under d z: "_Dz"
under d: "_D"
under date six: "_DATE"
under delta: "_D"
under e v six: "_EV"
under e v: "_ev"
under early six: "_EARLY"
under echo: "_E"
under extra five: "_extra"
under f: "_f"
under first six: "_FIRST"
under fixed geometries: "_FixedGeometries"
under flag six: "_FLAG"
under full: "_Full"
under g d a twenty twenty: "_GDA2020"
under g d a ninety four: "_GDA94"
under g r d: "_grd"
under golf: "_g"
under group six: "_GROUP"
under i d six: "_ID"
under i n d: "_ind"
under j t t: "_JTT"
under juliet: "_j"
under l o g: "_Log"
under l: user.rz_insert_key_sequence("_{{Z1L}}")
under last six: "_LAST"
under line six: "_LINE"
under lit six: "_LIT"
under locality six: "_LOCALITY"
under locality line: "_LOCALITY_LINE"
under m m six: "_MM"
under m m o six: "_MMO"
under m m: "_MM"
under mike: "_M"
under n b r: "_nbr"
under n g: "_NG"
under name six: "_NAME"
under on net: "_OnNet"
under p i d six: "_PID"
under p s m a : "_PSMA"
under p s m a six: "_PSMA"
under parcel six: "_PARCEL"
under point six: "_POINT"
under polygon six: "_POLYGON"
under polygon p i d six: "_POLYGON_PID"
under pool six: "_POOL"
under prefix six: "_PREFIX"
under q l d six: "_QLD"
under r z : "_rz"
under reg c r s: "_REGCRS"
under retired: "_RETIRED"
under road six: "_ROAD"
under romeo one: "_R1"
under romeo: "_R"
under run four: "_Run4"
under s left: user.rz_insert_key_sequence("_{{space}}{{left}}")
under s t r six: "_STR"
under s: "_S"
under shape: "_Shape"
under site six: "_SITE"
under site geocode six: "_SITE_GEOCODE"
under source six: "_SOURCE"
under suffix six: "_SUFFIX"
under summary: "_Summary"
under t a b one: "_Tab"
under t a b: "_tab"
under t i f: "_tif"
under t n t six: "_TNT"
under t: "_T("
under tab six: "_TAB"
under table six: "_TABLE"
under type six: "_TYPE"
under type code six: "_TYPE_CODE"
under under far: "__far"
under under huge: "__huge "
under under: "__"
under uniform: "_U"
under v two: "_v2"
under v three: "_v3"
under v a l: "_val"
under v i c six: "_VIC"
under variant: "_variant_t"
under victor zero: "_v0"
under victor one: "_v1"
under victor two: "_v2"
under victor four: "_v4"
under victor six: "_v6"
under victor seven: "_v7"
under x-ray: "_X"
under x one: "_x1"
under x two: "_x2"
under x three: "_x3"
under x f l : "_XFL"
under x y c: "_XyC"
under x y p: "_XyP"
under zip six: "_ZIP"
under zone six: "_ZONE"
under zulu: "_Z"
underscore one: "_1"
underscore two: "_2"
underscore three: "_3"
underscore four: "_4"
underscore five: "_5"
underscore seven: "_7"
underscore braces: user.rz_insert_key_sequence("_{{l-brace}}{{}}{{r-brace}}{{left}}")
underscore cap kilo: "_K"
underscore charlie: "_c"
underscore echo: "_e"
underscore golf: "_g"
underscore india: "_i"
underscore kilo: "_k"
underscore l: user.rz_insert_key_sequence("_{{Z1L}}")
underscore lima: "_l"
underscore mike: "_m"
underscore tango: "_t"
underscore uniform: "_u"
uni card: "UniCard"
uni code: "Unicode"
uni under zone: "UNI_ZONE"
uniform under: "u_"
uninstall dash: "Uninstall-"
unit dash: "UNIT-"
unit test: "UnitTest"
up jeep: "Abhijeet"
update data: "UpdateData("
uppercase next: user.rz_insert_key_sequence("")
upstream dash: "upstream-"
user name: "user name"
using call point dot: "using Callpoint."
using codet dot: "using Codet."
using name space s t d: "using namespace std"
using system dot: "using System."
using system: "using System"
util two dot: "Util2."
util two: "Util2"
util dot: "Util."
v one five zero: "v1.5.0"
v one : "v1"
v one one one: "v1.1.1"
v one four zero: "v1.4.0"
v one point two: "v1.2"
v one point three: "v1.3"
v two point zero: "v2.0"
v twenty nineteen dash one: "V2019-1"
v twenty twenty dash one: "V2020-1"
v twenty twenty dash two: "V2020-2"
v twenty twenty two dash: "V2022-"
v twenty twenty three dash: "V2023-"
v five: "v5"
v a six: "VA"
v a l: "val"
v a r: "var"
v as: " As "
v b five: "vb"
v b six: "VB"
v b sixty six: "VB6"
v b a : "VBA"
v b a six: "VBA"
v b dot net: "VB.Net"
v b script: "vbscript"
v c six: "VC"
v c c six: "VCC"
v c c: "vcc"
v c i : "VCI"
v c p u: "vCPU"
v c p use: "vCPUs"
v constant s: "Const "
v constant: "const"
v d o : "VDO"
v d s l six: "VDSL"
v e n n: "venn"
v e n v: "venv"
v e r: "ver"
v else if: "ElseIf "
v else: "Else"
v end if: "End If"
v exit sub: "Exit Sub"
v form dot: "Form."
v form mark: "Form!"
v g w six: "VGW"
v i c six: "VIC"
v i c under six: "VIC_"
v i c: "vic"
v i p six: "VIP"
v if not: "If Not "
v m six: "VM"
v m c six: "VMC"
v m ware: "VMWare"
v m where dash host: "vmware-host"
v m x six: "VMX"
v m z: "VMs"
v n c: "vnc"
v o c u s: "Vocus"
v o i p: "VoIP"
v o n e x: "Vonex"
v p c six: "VPC"
v p c: "vpc"
v p n : "VPN"
v p n six: "VPN"
v p seas: "VPCs"
v r six: "VR"
v s five: "vs"
v s six: "VS"
v s code: "vscode"
v s s: "vss"
v s x f l: "VsXfl"
v t dash x: "VT-x"
v t l six: "VTL"
v t under: user.rz_insert_key_sequence("VT_{{Z6}}")
v u meter: "VUMeter"
v vocus system: "Vocus system"
v vocus: "Vocus"
v x d six: "VXD"
value dash added: "value-added"
var char six: "VARCHAR"
vector three: "Vector3"
verbally from: "verbally from"
vertical bar done: "|Done"
vertical bar left: user.rz_insert_key_sequence("|{{left}}")
vic map: "Vicmap"
victor one: "v1"
victor two: "v2"
victor three: "v3"
victor four: "v4"
victor five: "v5"
victor six: "v6"
victor seventeen: "v17"
virtual box: "VirtualBox"
visual s v n : "VisualSVN"
visual studio: "Visual Studio"
vitamin delta: "vitamin D"
vitamin kilo: "vitamin K"
vocus dash pricing: "Vocus-Pricing"
voice mail: "voicemail"
w three w p: "w3wp"
w a six: "WA"
w a comma: "WA,"
w a f six: "WAF"
w a h l: "Wahl"
w a n six: "WAN"
w a q six: "WAQ"
w a q dash seven: "WAQ-7"
w a q service: "WaqService"
w a q: "waq"
w a under: "WA_"
w arrow r: "W-{r-brace}R"
w c f six: "WCF"
w c f: "wcf"
w c u six: "WCU"
w char t: "wchar_t"
w d m: "WDM"
w e s six: "WES"
w e s: "wes"
w f four: "WF4"
w g s six: "WGS"
w g s eighty four: "WGS84"
w h q l: "WHQL"
w i k i: "wiki"
w i x: "wix"
w i z o : "WIZO"
w k b six: "WKB"
w k t six: "WKT"
w k t: "wkt"
w l six: "WL"
w m e: "wme"
w m f: "wmf"
w m p c f: "WmpCf"
w m p: "wmp"
w m s: "wms"
w m under: "WM_"
w n d: "wnd"
w o n: "Won"
w o t i f: "Wotif"
w o w six: "WOW"
w p f six: "WPF"
w p o i : "wpoi"
w p o i six: "WPOI"
w p o i under five: "wpoi_"
w p p w: "wppw"
w s twenty twenty two: "WS2022"
w s five: "ws"
w s a six: "WSA"
w s g six: "WSG"
w s g: "wsg"
w w w: "www"
w width: "width"
w write: "write"
walk through: "walkthrough"
waq dash seven: "WAQ-7"
watts app: "WhatsApp"
web a p i : "Web API"
web a q pro one: "WebAQPro"
web a q pro two: "WebAQPro2"
web assembly: "WebAssembly"
web auth n: "WebAuthn"
web cam: "webcam"
web forms one: "WebForms"
web hear here: "www.hear-here.com.au"
web site three: "WebSite"
web site: "web site"
web sockets: "WebSockets"
wednesday at twenty six: "wednesdaY@26"
wednesday cap y: "wednesdaY"
well dash: "well-"
west connects: "WestConnex"
west end: "West End"
wez farmers: "Wesfarmers"
whack dash one: "WAQ-1"
whack dash two: "WAQ-2"
whack dash three: "WAQ-3"
whack dash four: "WAQ-4"
whack dash five: "WAQ-5"
whack dash six: "WAQ-6"
whack dash eight: "WAQ-8"
whack dash: "WAQ-"
whack geoc: "WaqGeoc"
whack release: "WAQ release"
whack service: "WaqService"
whack support: "WAQ support"
where six s: "WHERE "
where dash: "Where-"
white list: "whitelist"
width equals one hundred percent: "width=100%"
width equals percent left: user.rz_insert_key_sequence("width=%{{left}}")
win thirty two: "Win32"
win error: "winerror"
win forms: "WinForms"
win zip: "WinZip"
windows ten: "Windows 10"
windows twenty [hundred]: "Windows 2000"
windows ninety eight: "Windows 98"
windows c e: "Windows CE"
windows media center: "Windows Media Center"
windows mobile: "Windows Mobile"
windows server twenty twenty two: "Windows Server 2022"
windows x p: "Windows XP"
winter ton: "Winterton"
wise ems dees: "yyyyMMdd"
word shoresh grammar: "WordShoreshGrammar"
work book: "workbook"
work spaces web: "WorkSpaces Web"
work spaces: "WorkSpaces"
work tree: "worktree"
wrike k: "Wrike"
write dash host: user.rz_insert_key_sequence("Write-Host{{space}}")
write dash: "Write-"
x-ray three: "X-Ray"
x-ray under six: "X_"
x-ray under: "x_"
x a m l six: "XAML"
x a m l: "xaml"
x attribute: "XAttribute"
x begin comment: "<!-- "
x comment to do: "<!-- TODO: "
x d o c: "xdoc"
x d s l: "xdsl"
x dash eighty three forty: "X-8340"
x dash y six: "X-Y"
x dash y: "x-y"
x document: "XDocument"
x e tell: "Exetel"
x element: "XElement"
x end comment: " -->"
x f l six: "XFL"
x f l only: "XFL Only"
x f l under: "XFL_"
x f l: "xfl"
x g boost: "XGBoost"
x i a o : "XIAO"
x l color: "XLColor"
x l s x: "xlsx"
x l s: "xls"
x light: "X-Lite"
x line comment: user.rz_insert_key_sequence("{{home}}<!-- {{end}} -->")
x list: "XList"
x m l : "xml"
x m l five: "xml"
x m l six: "XML"
x m l ampersand: "&amp;"
x m l greater than: "&gt;"
x m l less than: "&lt;"
x namespace: "XNamespace"
x o d o: "xodo"
x p six: "XP"
x p s: "xps"
x path: "XPath"
x s colon l: user.rz_insert_key_sequence("xs:{{Z1L}}")
x s d five: user.rz_insert_key_sequence("xsd")
x s d six: "XSD"
x s d under: user.rz_insert_key_sequence("xsd_")
x s d: "xsd"
x s l t : "XSLT"
x slash y: "x/y"
x unit: "xUnit"
x x six: "XX"
x x dash x x : "XX-XX"
x x x six: "XXX"
x x x under: "XXX_"
x y: "xy"
x zamel: "xaml"
y two k: "Y2K"
y a twenty: user.rz_insert_key_sequence("YA20_{{left}}")
y a six: "YA"
y a m l six: "YAML"
y a m l: "yaml"
y a r d e n: "Yarden"
y a slash m z: "YA/MZ"
y a slash r z : "YA/RZ"
y c l: "ycl"
y h a t: "yhat"
y i e n: "Yien"
y list: "YList"
y m m v : "YMMV"
y o s i: "Yosi"
y u v i: "Yuvi"
y val: "Yuval"
y y six: "YY"
y y y m m : "YYYMM"
y y y y: "yyyy"
yael abraham: "Yael Abraham"
yahoo u k: "www.yahoo.co.uk"
yarn six: "YARN"
yes enter: user.rz_insert_key_sequence("yes{{enter}}")
you b key: "YubiKey"
you tube: "YouTube"
your car log one: "YourCarLog"
z period: "period"
z one l  s: user.rz_insert_key_sequence("")
z fifty five: "Z55"
z fifty six: "Z56"
z nine six u w six: "Z96Uw6"
z alpha: "alpha"
z back quote: "backquote"
z back slash: "backslash"
z bar bar: "||"
z bar: "|"
z bravo: "bravo"
z charlie: "Charlie"
z comma: "comma"
z dash six: "Z-"
z dash: "dash"
z delta: "delta"
z echo: "echo"
z equals: "equals"
z f a : "ZFA"
z foxtrot: "foxtrot"
z golf: "golf"
z hotel: "hotel"
z india: "India"
z initialise: "initialize"
z juliet: "Juliet"
z kilo: "kilo"
z lima: "lima"
z mike: "Mike"
z minus: "minus"
z november: "November"
z o h o: "Zoho"
z oscar: "Oscar"
z papa: "papa"
z percent: "percent"
z point: "point"
z quebec: "Quebec"
z quote: "quote"
z romeo: "Romeo"
z s under: "ZS_"
z score: "Z-Score"
z semicolon: "semicolon"
z sierra: "sierra"
z slash: "slash"
z space: "space"
z star: "star"
z t e six: "ZTE"
z tango: "tango"
z tilde: "tilde"
z u l: "zul"
z underscore: "underscore"
z uniform: "uniform"
z victor: "victor"
z whiskey: "whiskey"
z x-ray: "x-ray"
z yankee: "yankee"
z zango: "Zango"
zainbeayin: "Dick in your eye"
zala com: "Xalacom"
zala tan: "Xalatan"
zed man here: "zedmanhere"
zero x: "0x"
zip path three: "ZipPath"

#
(ronnie | ronny): "Ronny"
(Zulaikha | zoo like her): "Zulaikha"
(Woollahra | wool are a): "Woollahra"
ad: "add"
(I see six | icy six): "IC"
my (talon | talent): "talon"
cap my (talon | talent): "Talon"

 